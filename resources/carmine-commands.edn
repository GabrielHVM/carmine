{
"ACL" {:fn-name "acl", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["ACL" arg1], :fn-docstring "A container for Access List Control commands..\n\nACL \n\nAvailable since: 6.0.0.\n\nTime complexity: Depends on subcommand."}
"ACL CAT" {:fn-name "acl-cat", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["ACL" "CAT"], :fn-docstring "Lists the ACL categories, or the commands inside a category..\n\nACL CAT [category]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(1) since the categories and commands are a fixed set."}
"ACL DELUSER" {:fn-name "acl-deluser", :cluster-key-idx 2, :fn-params-more [username & args], :fn-params-fixed [username], :req-args-fixed ["ACL" "DELUSER" username], :fn-docstring "Deletes ACL users, and terminates their connections..\n\nACL DELUSER username [username ...]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(1) amortized time considering the typical user."}
"ACL DRYRUN" {:fn-name "acl-dryrun", :cluster-key-idx 2, :fn-params-more [username command & args], :fn-params-fixed [username command], :req-args-fixed ["ACL" "DRYRUN" username command], :fn-docstring "Simulates the execution of a command by a user, without executing the command..\n\nACL DRYRUN username command [arg [arg ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)."}
"ACL GENPASS" {:fn-name "acl-genpass", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["ACL" "GENPASS"], :fn-docstring "Generates a pseudorandom, secure password that can be used to identify ACL users..\n\nACL GENPASS [bits]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(1)"}
"ACL GETUSER" {:fn-name "acl-getuser", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [username], :req-args-fixed ["ACL" "GETUSER" username], :fn-docstring "Lists the ACL rules of a user..\n\nACL GETUSER username\n\nAvailable since: 6.0.0.\n\nTime complexity: O(N). Where N is the number of password, command and pattern rules that the user has."}
"ACL HELP" {:fn-name "acl-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nACL HELP \n\nAvailable since: 6.0.0.\n\nTime complexity: O(1)"}
"ACL LIST" {:fn-name "acl-list", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "LIST"], :fn-docstring "Dumps the effective rules in ACL file format..\n\nACL LIST \n\nAvailable since: 6.0.0.\n\nTime complexity: O(N). Where N is the number of configured users."}
"ACL LOAD" {:fn-name "acl-load", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "LOAD"], :fn-docstring "Reloads the rules from the configured ACL file..\n\nACL LOAD \n\nAvailable since: 6.0.0.\n\nTime complexity: O(N). Where N is the number of configured users."}
"ACL LOG" {:fn-name "acl-log", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["ACL" "LOG"], :fn-docstring "Lists recent security events generated due to ACL rules..\n\nACL LOG [operation]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(N) with N being the number of entries shown."}
"ACL SAVE" {:fn-name "acl-save", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "SAVE"], :fn-docstring "Saves the effective ACL rules in the configured ACL file..\n\nACL SAVE \n\nAvailable since: 6.0.0.\n\nTime complexity: O(N). Where N is the number of configured users."}
"ACL SETUSER" {:fn-name "acl-setuser", :cluster-key-idx 2, :fn-params-more [username & args], :fn-params-fixed [username], :req-args-fixed ["ACL" "SETUSER" username], :fn-docstring "Creates and modifies an ACL user and its rules..\n\nACL SETUSER username [rule [rule ...]]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(N). Where N is the number of rules provided."}
"ACL USERS" {:fn-name "acl-users", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "USERS"], :fn-docstring "Lists all ACL users..\n\nACL USERS \n\nAvailable since: 6.0.0.\n\nTime complexity: O(N). Where N is the number of configured users."}
"ACL WHOAMI" {:fn-name "acl-whoami", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "WHOAMI"], :fn-docstring "Returns the authenticated username of the current connection..\n\nACL WHOAMI \n\nAvailable since: 6.0.0.\n\nTime complexity: O(1)"}
"APPEND" {:fn-name "append", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key value], :req-args-fixed ["APPEND" key value], :fn-docstring "Appends a string to the value of a key. Creates the key if it doesn't exist..\n\nAPPEND key value\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation."}
"ASKING" {:fn-name "asking", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ASKING"], :fn-docstring "Signals that a cluster client is following an -ASK redirect..\n\nASKING \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"AUTH" {:fn-name "auth", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["AUTH" arg1], :fn-docstring "Authenticates the connection..\n\nAUTH [username] password\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of passwords defined for the user"}
"BGREWRITEAOF" {:fn-name "bgrewriteaof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["BGREWRITEAOF"], :fn-docstring "Asynchronously rewrites the append-only file to disk..\n\nBGREWRITEAOF \n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"BGSAVE" {:fn-name "bgsave", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["BGSAVE"], :fn-docstring "Asynchronously saves the database(s) to disk..\n\nBGSAVE [schedule]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"BITCOUNT" {:fn-name "bitcount", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["BITCOUNT" key], :fn-docstring "Counts the number of set bits (population counting) in a string..\n\nBITCOUNT key [range]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N)"}
"BITFIELD" {:fn-name "bitfield", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["BITFIELD" key], :fn-docstring "Performs arbitrary bitfield integer operations on strings..\n\nBITFIELD key [operation [operation ...]]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(1) for each subcommand specified"}
"BITFIELD_RO" {:fn-name "bitfield_ro", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["BITFIELD_RO" key], :fn-docstring "Performs arbitrary read-only bitfield integer operations on strings..\n\nBITFIELD_RO key [get-block [get-block ...]]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(1) for each subcommand specified"}
"BITOP" {:fn-name "bitop", :cluster-key-idx 1, :fn-params-more [arg1 arg2 arg3 & args], :fn-params-fixed [arg1 arg2 arg3], :req-args-fixed ["BITOP" arg1 arg2 arg3], :fn-docstring "Performs bitwise operations on multiple strings, and stores the result..\n\nBITOP operation destkey key [key ...]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N)"}
"BITPOS" {:fn-name "bitpos", :cluster-key-idx 1, :fn-params-more [key bit & args], :fn-params-fixed [key bit], :req-args-fixed ["BITPOS" key bit], :fn-docstring "Finds the first set (1) or clear (0) bit in a string..\n\nBITPOS key bit [range]\n\nAvailable since: 2.8.7.\n\nTime complexity: O(N)"}
"BLMOVE" {:fn-name "blmove", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination arg1 arg2 arg3], :req-args-fixed ["BLMOVE" source destination arg1 arg2 arg3], :fn-docstring "Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved..\n\nBLMOVE source destination wherefrom whereto timeout\n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"BLMPOP" {:fn-name "blmpop", :cluster-key-idx 1, :fn-params-more [timeout numkeys key arg1 & args], :fn-params-fixed [timeout numkeys key arg1], :req-args-fixed ["BLMPOP" timeout numkeys key arg1], :fn-docstring "Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped..\n\nBLMPOP timeout numkeys key [key ...] where [count]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned."}
"BLPOP" {:fn-name "blpop", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BLPOP" key arg1], :fn-docstring "Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped..\n\nBLPOP key [key ...] timeout\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of provided keys."}
"BRPOP" {:fn-name "brpop", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BRPOP" key arg1], :fn-docstring "Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped..\n\nBRPOP key [key ...] timeout\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of provided keys."}
"BRPOPLPUSH" {:fn-name "brpoplpush", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination timeout], :req-args-fixed ["BRPOPLPUSH" source destination timeout], :fn-docstring "Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped..\n\nBRPOPLPUSH source destination timeout\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)"}
"BZMPOP" {:fn-name "bzmpop", :cluster-key-idx 1, :fn-params-more [timeout numkeys key arg1 & args], :fn-params-fixed [timeout numkeys key arg1], :req-args-fixed ["BZMPOP" timeout numkeys key arg1], :fn-docstring "Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped..\n\nBZMPOP timeout numkeys key [key ...] where [count]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped."}
"BZPOPMAX" {:fn-name "bzpopmax", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BZPOPMAX" key arg1], :fn-docstring "Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped..\n\nBZPOPMAX key [key ...] timeout\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set."}
"BZPOPMIN" {:fn-name "bzpopmin", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BZPOPMIN" key arg1], :fn-docstring "Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped..\n\nBZPOPMIN key [key ...] timeout\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set."}
"CLIENT" {:fn-name "client", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" arg1], :fn-docstring "A container for client connection commands..\n\nCLIENT \n\nAvailable since: 2.4.0.\n\nTime complexity: Depends on subcommand."}
"CLIENT CACHING" {:fn-name "client-caching", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "CACHING" arg1], :fn-docstring "Instructs the server whether to track the keys in the next request..\n\nCLIENT CACHING mode\n\nAvailable since: 6.0.0.\n\nTime complexity: O(1)"}
"CLIENT GETNAME" {:fn-name "client-getname", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "GETNAME"], :fn-docstring "Returns the name of the connection..\n\nCLIENT GETNAME \n\nAvailable since: 2.6.9.\n\nTime complexity: O(1)"}
"CLIENT GETREDIR" {:fn-name "client-getredir", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "GETREDIR"], :fn-docstring "Returns the client ID to which the connection's tracking notifications are redirected..\n\nCLIENT GETREDIR \n\nAvailable since: 6.0.0.\n\nTime complexity: O(1)"}
"CLIENT HELP" {:fn-name "client-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nCLIENT HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"CLIENT ID" {:fn-name "client-id", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "ID"], :fn-docstring "Returns the unique client ID of the connection..\n\nCLIENT ID \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"CLIENT INFO" {:fn-name "client-info", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "INFO"], :fn-docstring "Returns information about the connection..\n\nCLIENT INFO \n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"CLIENT KILL" {:fn-name "client-kill", :cluster-key-idx 2, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "KILL" arg1], :fn-docstring "Terminates open connections..\n\nCLIENT KILL filter\n\nAvailable since: 2.4.0.\n\nTime complexity: O(N) where N is the number of client connections"}
"CLIENT LIST" {:fn-name "client-list", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["CLIENT" "LIST"], :fn-docstring "Lists open connections..\n\nCLIENT LIST [client-type] [client-id [client-id ...]]\n\nAvailable since: 2.4.0.\n\nTime complexity: O(N) where N is the number of client connections"}
"CLIENT NO-EVICT" {:fn-name "client-no-evict", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "NO-EVICT" arg1], :fn-docstring "Sets the client eviction mode of the connection..\n\nCLIENT NO-EVICT enabled\n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"CLIENT NO-TOUCH" {:fn-name "client-no-touch", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "NO-TOUCH" arg1], :fn-docstring "Controls whether commands sent by the client affect the LRU/LFU of accessed keys..\n\nCLIENT NO-TOUCH enabled\n\nAvailable since: 7.2.0.\n\nTime complexity: O(1)"}
"CLIENT PAUSE" {:fn-name "client-pause", :cluster-key-idx 2, :fn-params-more [timeout & args], :fn-params-fixed [timeout], :req-args-fixed ["CLIENT" "PAUSE" timeout], :fn-docstring "Suspends commands processing..\n\nCLIENT PAUSE timeout [mode]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLIENT REPLY" {:fn-name "client-reply", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "REPLY" arg1], :fn-docstring "Instructs the server whether to reply to commands..\n\nCLIENT REPLY action\n\nAvailable since: 3.2.0.\n\nTime complexity: O(1)"}
"CLIENT SETINFO" {:fn-name "client-setinfo", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1 arg2], :req-args-fixed ["CLIENT" "SETINFO" arg1 arg2], :fn-docstring "Sets information specific to the client or connection..\n\nCLIENT SETINFO attr\n\nAvailable since: 7.2.0.\n\nTime complexity: O(1)"}
"CLIENT SETNAME" {:fn-name "client-setname", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [connection-name], :req-args-fixed ["CLIENT" "SETNAME" connection-name], :fn-docstring "Sets the connection name..\n\nCLIENT SETNAME connection-name\n\nAvailable since: 2.6.9.\n\nTime complexity: O(1)"}
"CLIENT TRACKING" {:fn-name "client-tracking", :cluster-key-idx 2, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "TRACKING" arg1], :fn-docstring "Controls server-assisted client-side caching for the connection..\n\nCLIENT TRACKING status [client-id] [prefix [prefix ...]] [bcast] [optin] [optout] [noloop]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(1). Some options may introduce additional complexity."}
"CLIENT TRACKINGINFO" {:fn-name "client-trackinginfo", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "TRACKINGINFO"], :fn-docstring "Returns information about server-assisted client-side caching for the connection..\n\nCLIENT TRACKINGINFO \n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"CLIENT UNBLOCK" {:fn-name "client-unblock", :cluster-key-idx 2, :fn-params-more [client-id & args], :fn-params-fixed [client-id], :req-args-fixed ["CLIENT" "UNBLOCK" client-id], :fn-docstring "Unblocks a client blocked by a blocking command from a different connection..\n\nCLIENT UNBLOCK client-id [unblock-type]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log N) where N is the number of client connections"}
"CLIENT UNPAUSE" {:fn-name "client-unpause", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "UNPAUSE"], :fn-docstring "Resumes processing commands from paused clients..\n\nCLIENT UNPAUSE \n\nAvailable since: 6.2.0.\n\nTime complexity: O(N) Where N is the number of paused clients"}
"CLUSTER" {:fn-name "cluster", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLUSTER" arg1], :fn-docstring "A container for Redis Cluster commands..\n\nCLUSTER \n\nAvailable since: 3.0.0.\n\nTime complexity: Depends on subcommand."}
"CLUSTER ADDSLOTS" {:fn-name "cluster-addslots", :cluster-key-idx 2, :fn-params-more [slot & args], :fn-params-fixed [slot], :req-args-fixed ["CLUSTER" "ADDSLOTS" slot], :fn-docstring "Assigns new hash slots to a node..\n\nCLUSTER ADDSLOTS slot [slot ...]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of hash slot arguments"}
"CLUSTER ADDSLOTSRANGE" {:fn-name "cluster-addslotsrange", :cluster-key-idx 2, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["CLUSTER" "ADDSLOTSRANGE" arg1 arg2], :fn-docstring "Assigns new hash slot ranges to a node..\n\nCLUSTER ADDSLOTSRANGE range [range ...]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments."}
"CLUSTER BUMPEPOCH" {:fn-name "cluster-bumpepoch", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "BUMPEPOCH"], :fn-docstring "Advances the cluster config epoch..\n\nCLUSTER BUMPEPOCH \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER COUNT-FAILURE-REPORTS" {:fn-name "cluster-count-failure-reports", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "COUNT-FAILURE-REPORTS" node-id], :fn-docstring "Returns the number of active failure reports active for a node..\n\nCLUSTER COUNT-FAILURE-REPORTS node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the number of failure reports"}
"CLUSTER COUNTKEYSINSLOT" {:fn-name "cluster-countkeysinslot", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [slot], :req-args-fixed ["CLUSTER" "COUNTKEYSINSLOT" slot], :fn-docstring "Returns the number of keys in a hash slot..\n\nCLUSTER COUNTKEYSINSLOT slot\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER DELSLOTS" {:fn-name "cluster-delslots", :cluster-key-idx 2, :fn-params-more [slot & args], :fn-params-fixed [slot], :req-args-fixed ["CLUSTER" "DELSLOTS" slot], :fn-docstring "Sets hash slots as unbound for a node..\n\nCLUSTER DELSLOTS slot [slot ...]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of hash slot arguments"}
"CLUSTER DELSLOTSRANGE" {:fn-name "cluster-delslotsrange", :cluster-key-idx 2, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["CLUSTER" "DELSLOTSRANGE" arg1 arg2], :fn-docstring "Sets hash slot ranges as unbound for a node..\n\nCLUSTER DELSLOTSRANGE range [range ...]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments."}
"CLUSTER FAILOVER" {:fn-name "cluster-failover", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["CLUSTER" "FAILOVER"], :fn-docstring "Forces a replica to perform a manual failover of its master..\n\nCLUSTER FAILOVER [options]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER FLUSHSLOTS" {:fn-name "cluster-flushslots", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "FLUSHSLOTS"], :fn-docstring "Deletes all slots information from a node..\n\nCLUSTER FLUSHSLOTS \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER FORGET" {:fn-name "cluster-forget", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "FORGET" node-id], :fn-docstring "Removes a node from the nodes table..\n\nCLUSTER FORGET node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER GETKEYSINSLOT" {:fn-name "cluster-getkeysinslot", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [slot count], :req-args-fixed ["CLUSTER" "GETKEYSINSLOT" slot count], :fn-docstring "Returns the key names in a hash slot..\n\nCLUSTER GETKEYSINSLOT slot count\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the number of requested keys"}
"CLUSTER HELP" {:fn-name "cluster-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nCLUSTER HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"CLUSTER INFO" {:fn-name "cluster-info", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "INFO"], :fn-docstring "Returns information about the state of a node..\n\nCLUSTER INFO \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER KEYSLOT" {:fn-name "cluster-keyslot", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["CLUSTER" "KEYSLOT" key], :fn-docstring "Returns the hash slot for a key..\n\nCLUSTER KEYSLOT key\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the number of bytes in the key"}
"CLUSTER LINKS" {:fn-name "cluster-links", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "LINKS"], :fn-docstring "Returns a list of all TCP links to and from peer nodes..\n\nCLUSTER LINKS \n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the total number of Cluster nodes"}
"CLUSTER MEET" {:fn-name "cluster-meet", :cluster-key-idx 2, :fn-params-more [ip port & args], :fn-params-fixed [ip port], :req-args-fixed ["CLUSTER" "MEET" ip port], :fn-docstring "Forces a node to handshake with another node..\n\nCLUSTER MEET ip port [cluster-bus-port]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER MYID" {:fn-name "cluster-myid", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "MYID"], :fn-docstring "Returns the ID of a node..\n\nCLUSTER MYID \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER MYSHARDID" {:fn-name "cluster-myshardid", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "MYSHARDID"], :fn-docstring "Returns the shard ID of a node..\n\nCLUSTER MYSHARDID \n\nAvailable since: 7.2.0.\n\nTime complexity: O(1)"}
"CLUSTER NODES" {:fn-name "cluster-nodes", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "NODES"], :fn-docstring "Returns the cluster configuration for a node..\n\nCLUSTER NODES \n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of Cluster nodes"}
"CLUSTER REPLICAS" {:fn-name "cluster-replicas", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "REPLICAS" node-id], :fn-docstring "Lists the replica nodes of a master node..\n\nCLUSTER REPLICAS node-id\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"CLUSTER REPLICATE" {:fn-name "cluster-replicate", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "REPLICATE" node-id], :fn-docstring "Configure a node as replica of a master node..\n\nCLUSTER REPLICATE node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER RESET" {:fn-name "cluster-reset", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["CLUSTER" "RESET"], :fn-docstring "Resets a node..\n\nCLUSTER RESET [reset-type]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect."}
"CLUSTER SAVECONFIG" {:fn-name "cluster-saveconfig", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "SAVECONFIG"], :fn-docstring "Forces a node to save the cluster configuration to disk..\n\nCLUSTER SAVECONFIG \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER SET-CONFIG-EPOCH" {:fn-name "cluster-set-config-epoch", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [config-epoch], :req-args-fixed ["CLUSTER" "SET-CONFIG-EPOCH" config-epoch], :fn-docstring "Sets the configuration epoch for a new node..\n\nCLUSTER SET-CONFIG-EPOCH config-epoch\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER SETSLOT" {:fn-name "cluster-setslot", :cluster-key-idx 2, :fn-params-more [slot arg1 & args], :fn-params-fixed [slot arg1], :req-args-fixed ["CLUSTER" "SETSLOT" slot arg1], :fn-docstring "Binds a hash slot to a node..\n\nCLUSTER SETSLOT slot subcommand\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER SHARDS" {:fn-name "cluster-shards", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "SHARDS"], :fn-docstring "Returns the mapping of cluster slots to shards..\n\nCLUSTER SHARDS \n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the total number of cluster nodes"}
"CLUSTER SLAVES" {:fn-name "cluster-slaves", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "SLAVES" node-id], :fn-docstring "Lists the replica nodes of a master node..\n\nCLUSTER SLAVES node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"CLUSTER SLOTS" {:fn-name "cluster-slots", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "SLOTS"], :fn-docstring "Returns the mapping of cluster slots to nodes..\n\nCLUSTER SLOTS \n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of Cluster nodes"}
"COMMAND" {:fn-name "command", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND"], :fn-docstring "Returns detailed information about all commands..\n\nCOMMAND \n\nAvailable since: 2.8.13.\n\nTime complexity: O(N) where N is the total number of Redis commands"}
"COMMAND COUNT" {:fn-name "command-count", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["COMMAND" "COUNT"], :fn-docstring "Returns a count of commands..\n\nCOMMAND COUNT \n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)"}
"COMMAND DOCS" {:fn-name "command-docs", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND" "DOCS"], :fn-docstring "Returns documentary information about one, multiple or all commands..\n\nCOMMAND DOCS [command-name [command-name ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of commands to look up"}
"COMMAND GETKEYS" {:fn-name "command-getkeys", :cluster-key-idx 2, :fn-params-more [command & args], :fn-params-fixed [command], :req-args-fixed ["COMMAND" "GETKEYS" command], :fn-docstring "Extracts the key names from an arbitrary command..\n\nCOMMAND GETKEYS command [arg [arg ...]]\n\nAvailable since: 2.8.13.\n\nTime complexity: O(N) where N is the number of arguments to the command"}
"COMMAND GETKEYSANDFLAGS" {:fn-name "command-getkeysandflags", :cluster-key-idx 2, :fn-params-more [command & args], :fn-params-fixed [command], :req-args-fixed ["COMMAND" "GETKEYSANDFLAGS" command], :fn-docstring "Extracts the key names and access flags for an arbitrary command..\n\nCOMMAND GETKEYSANDFLAGS command [arg [arg ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of arguments to the command"}
"COMMAND HELP" {:fn-name "command-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["COMMAND" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nCOMMAND HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"COMMAND INFO" {:fn-name "command-info", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND" "INFO"], :fn-docstring "Returns information about one, multiple or all commands..\n\nCOMMAND INFO [command-name [command-name ...]]\n\nAvailable since: 2.8.13.\n\nTime complexity: O(N) where N is the number of commands to look up"}
"COMMAND LIST" {:fn-name "command-list", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND" "LIST"], :fn-docstring "Returns a list of command names..\n\nCOMMAND LIST [filterby]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the total number of Redis commands"}
"CONFIG" {:fn-name "config", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CONFIG" arg1], :fn-docstring "A container for server configuration commands..\n\nCONFIG \n\nAvailable since: 2.0.0.\n\nTime complexity: Depends on subcommand."}
"CONFIG GET" {:fn-name "config-get", :cluster-key-idx 2, :fn-params-more [parameter & args], :fn-params-fixed [parameter], :req-args-fixed ["CONFIG" "GET" parameter], :fn-docstring "Returns the effective values of configuration parameters..\n\nCONFIG GET parameter [parameter ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) when N is the number of configuration parameters provided"}
"CONFIG HELP" {:fn-name "config-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CONFIG" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nCONFIG HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"CONFIG RESETSTAT" {:fn-name "config-resetstat", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CONFIG" "RESETSTAT"], :fn-docstring "Resets the server's statistics..\n\nCONFIG RESETSTAT \n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)"}
"CONFIG REWRITE" {:fn-name "config-rewrite", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CONFIG" "REWRITE"], :fn-docstring "Persists the effective configuration to file..\n\nCONFIG REWRITE \n\nAvailable since: 2.8.0.\n\nTime complexity: O(1)"}
"CONFIG SET" {:fn-name "config-set", :cluster-key-idx 2, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["CONFIG" "SET" arg1 arg2], :fn-docstring "Sets configuration parameters in-flight..\n\nCONFIG SET data [data ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) when N is the number of configuration parameters provided"}
"COPY" {:fn-name "copy", :cluster-key-idx 1, :fn-params-more [source destination & args], :fn-params-fixed [source destination], :req-args-fixed ["COPY" source destination], :fn-docstring "Copies the value of a key to a new key..\n\nCOPY source destination [destination-db] [replace]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N) worst case for collections, where N is the number of nested items. O(1) for string values."}
"DBSIZE" {:fn-name "dbsize", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["DBSIZE"], :fn-docstring "Returns the number of keys in the database..\n\nDBSIZE \n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"DEBUG" {:fn-name "debug", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["DEBUG" arg1], :fn-docstring "A container for debugging commands..\n\nDEBUG \n\nAvailable since: 1.0.0.\n\nTime complexity: Depends on subcommand."}
"DECR" {:fn-name "decr", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["DECR" key], :fn-docstring "Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist..\n\nDECR key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"DECRBY" {:fn-name "decrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key decrement], :req-args-fixed ["DECRBY" key decrement], :fn-docstring "Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist..\n\nDECRBY key decrement\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"DEL" {:fn-name "del", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["DEL" key], :fn-docstring "Deletes one or more keys..\n\nDEL key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1)."}
"DISCARD" {:fn-name "discard", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["DISCARD"], :fn-docstring "Discards a transaction..\n\nDISCARD \n\nAvailable since: 2.0.0.\n\nTime complexity: O(N), when N is the number of queued commands"}
"DUMP" {:fn-name "dump", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["DUMP" key], :fn-docstring "Returns a serialized representation of the value stored at a key..\n\nDUMP key\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1)."}
"ECHO" {:fn-name "echo", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [message], :req-args-fixed ["ECHO" message], :fn-docstring "Returns the given string..\n\nECHO message\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"EVAL" {:fn-name "eval", :cluster-key-idx 1, :fn-params-more [script numkeys & args], :fn-params-fixed [script numkeys], :req-args-fixed ["EVAL" script numkeys], :fn-docstring "Executes a server-side Lua script..\n\nEVAL script numkeys [key [key ...]] [arg [arg ...]]\n\nAvailable since: 2.6.0.\n\nTime complexity: Depends on the script that is executed."}
"EVALSHA" {:fn-name "evalsha", :cluster-key-idx 1, :fn-params-more [sha1 numkeys & args], :fn-params-fixed [sha1 numkeys], :req-args-fixed ["EVALSHA" sha1 numkeys], :fn-docstring "Executes a server-side Lua script by SHA1 digest..\n\nEVALSHA sha1 numkeys [key [key ...]] [arg [arg ...]]\n\nAvailable since: 2.6.0.\n\nTime complexity: Depends on the script that is executed."}
"EVALSHA_RO" {:fn-name "evalsha_ro", :cluster-key-idx 1, :fn-params-more [sha1 numkeys & args], :fn-params-fixed [sha1 numkeys], :req-args-fixed ["EVALSHA_RO" sha1 numkeys], :fn-docstring "Executes a read-only server-side Lua script by SHA1 digest..\n\nEVALSHA_RO sha1 numkeys [key [key ...]] [arg [arg ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: Depends on the script that is executed."}
"EVAL_RO" {:fn-name "eval_ro", :cluster-key-idx 1, :fn-params-more [script numkeys & args], :fn-params-fixed [script numkeys], :req-args-fixed ["EVAL_RO" script numkeys], :fn-docstring "Executes a read-only server-side Lua script..\n\nEVAL_RO script numkeys [key [key ...]] [arg [arg ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: Depends on the script that is executed."}
"EXEC" {:fn-name "exec", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["EXEC"], :fn-docstring "Executes all commands in a transaction..\n\nEXEC \n\nAvailable since: 1.2.0.\n\nTime complexity: Depends on commands in the transaction"}
"EXISTS" {:fn-name "exists", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["EXISTS" key], :fn-docstring "Determines whether one or more keys exist..\n\nEXISTS key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of keys to check."}
"EXPIRE" {:fn-name "expire", :cluster-key-idx 1, :fn-params-more [key seconds & args], :fn-params-fixed [key seconds], :req-args-fixed ["EXPIRE" key seconds], :fn-docstring "Sets the expiration time of a key in seconds..\n\nEXPIRE key seconds [condition]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"EXPIREAT" {:fn-name "expireat", :cluster-key-idx 1, :fn-params-more [key unix-time-seconds & args], :fn-params-fixed [key unix-time-seconds], :req-args-fixed ["EXPIREAT" key unix-time-seconds], :fn-docstring "Sets the expiration time of a key to a Unix timestamp..\n\nEXPIREAT key unix-time-seconds [condition]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)"}
"EXPIRETIME" {:fn-name "expiretime", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["EXPIRETIME" key], :fn-docstring "Returns the expiration time of a key as a Unix timestamp..\n\nEXPIRETIME key\n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"FAILOVER" {:fn-name "failover", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FAILOVER"], :fn-docstring "Starts a coordinated failover from a server to one of its replicas..\n\nFAILOVER [target] [abort] [milliseconds]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"FCALL" {:fn-name "fcall", :cluster-key-idx 1, :fn-params-more [function numkeys & args], :fn-params-fixed [function numkeys], :req-args-fixed ["FCALL" function numkeys], :fn-docstring "Invokes a function..\n\nFCALL function numkeys [key [key ...]] [arg [arg ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: Depends on the function that is executed."}
"FCALL_RO" {:fn-name "fcall_ro", :cluster-key-idx 1, :fn-params-more [function numkeys & args], :fn-params-fixed [function numkeys], :req-args-fixed ["FCALL_RO" function numkeys], :fn-docstring "Invokes a read-only function..\n\nFCALL_RO function numkeys [key [key ...]] [arg [arg ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: Depends on the function that is executed."}
"FLUSHALL" {:fn-name "flushall", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FLUSHALL"], :fn-docstring "Removes all keys from all databases..\n\nFLUSHALL [flush-type]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of keys in all databases"}
"FLUSHDB" {:fn-name "flushdb", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FLUSHDB"], :fn-docstring "Remove all keys from the current database..\n\nFLUSHDB [flush-type]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of keys in the selected database"}
"FUNCTION" {:fn-name "function", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["FUNCTION" arg1], :fn-docstring "A container for function commands..\n\nFUNCTION \n\nAvailable since: 7.0.0.\n\nTime complexity: Depends on subcommand."}
"FUNCTION DELETE" {:fn-name "function-delete", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [library-name], :req-args-fixed ["FUNCTION" "DELETE" library-name], :fn-docstring "Deletes a library and its functions..\n\nFUNCTION DELETE library-name\n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"FUNCTION DUMP" {:fn-name "function-dump", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "DUMP"], :fn-docstring "Dumps all libraries into a serialized binary payload..\n\nFUNCTION DUMP \n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of functions"}
"FUNCTION FLUSH" {:fn-name "function-flush", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FUNCTION" "FLUSH"], :fn-docstring "Deletes all libraries and functions..\n\nFUNCTION FLUSH [flush-type]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of functions deleted"}
"FUNCTION HELP" {:fn-name "function-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nFUNCTION HELP \n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"FUNCTION KILL" {:fn-name "function-kill", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "KILL"], :fn-docstring "Terminates a function during execution..\n\nFUNCTION KILL \n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"FUNCTION LIST" {:fn-name "function-list", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FUNCTION" "LIST"], :fn-docstring "Returns information about all libraries..\n\nFUNCTION LIST [library-name-pattern] [withcode]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of functions"}
"FUNCTION LOAD" {:fn-name "function-load", :cluster-key-idx 2, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["FUNCTION" "LOAD" arg1], :fn-docstring "Creates a library..\n\nFUNCTION LOAD [replace] function-code\n\nAvailable since: 7.0.0.\n\nTime complexity: O(1) (considering compilation time is redundant)"}
"FUNCTION RESTORE" {:fn-name "function-restore", :cluster-key-idx 2, :fn-params-more [serialized-value & args], :fn-params-fixed [serialized-value], :req-args-fixed ["FUNCTION" "RESTORE" serialized-value], :fn-docstring "Restores all libraries from a payload..\n\nFUNCTION RESTORE serialized-value [policy]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of functions on the payload"}
"FUNCTION STATS" {:fn-name "function-stats", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "STATS"], :fn-docstring "Returns information about a function during execution..\n\nFUNCTION STATS \n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"GEOADD" {:fn-name "geoadd", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 arg3 & args], :fn-params-fixed [key arg1 arg2 arg3], :req-args-fixed ["GEOADD" key arg1 arg2 arg3], :fn-docstring "Adds one or more members to a geospatial index. The key is created if it doesn't exist..\n\nGEOADD key [condition] [change] data [data ...]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set."}
"GEODIST" {:fn-name "geodist", :cluster-key-idx 1, :fn-params-more [key member1 member2 & args], :fn-params-fixed [key member1 member2], :req-args-fixed ["GEODIST" key member1 member2], :fn-docstring "Returns the distance between two members of a geospatial index..\n\nGEODIST key member1 member2 [unit]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(log(N))"}
"GEOHASH" {:fn-name "geohash", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["GEOHASH" key], :fn-docstring "Returns members from a geospatial index as geohash strings..\n\nGEOHASH key [member [member ...]]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(log(N)) for each member requested, where N is the number of elements in the sorted set."}
"GEOPOS" {:fn-name "geopos", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["GEOPOS" key], :fn-docstring "Returns the longitude and latitude of members from a geospatial index..\n\nGEOPOS key [member [member ...]]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(N) where N is the number of members requested."}
"GEORADIUS" {:fn-name "georadius", :cluster-key-idx 1, :fn-params-more [key longitude latitude radius arg1 & args], :fn-params-fixed [key longitude latitude radius arg1], :req-args-fixed ["GEORADIUS" key longitude latitude radius arg1], :fn-docstring "Queries a geospatial index for members within a distance from a coordinate, optionally stores the result..\n\nGEORADIUS key longitude latitude radius unit [withcoord] [withdist] [withhash] [count-block] [order] [store]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index."}
"GEORADIUSBYMEMBER" {:fn-name "georadiusbymember", :cluster-key-idx 1, :fn-params-more [key member radius arg1 & args], :fn-params-fixed [key member radius arg1], :req-args-fixed ["GEORADIUSBYMEMBER" key member radius arg1], :fn-docstring "Queries a geospatial index for members within a distance from a member, optionally stores the result..\n\nGEORADIUSBYMEMBER key member radius unit [withcoord] [withdist] [withhash] [count-block] [order] [store]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index."}
"GEORADIUSBYMEMBER_RO" {:fn-name "georadiusbymember_ro", :cluster-key-idx 1, :fn-params-more [key member radius arg1 & args], :fn-params-fixed [key member radius arg1], :req-args-fixed ["GEORADIUSBYMEMBER_RO" key member radius arg1], :fn-docstring "Returns members from a geospatial index that are within a distance from a member..\n\nGEORADIUSBYMEMBER_RO key member radius unit [withcoord] [withdist] [withhash] [count-block] [order]\n\nAvailable since: 3.2.10.\n\nTime complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index."}
"GEORADIUS_RO" {:fn-name "georadius_ro", :cluster-key-idx 1, :fn-params-more [key longitude latitude radius arg1 & args], :fn-params-fixed [key longitude latitude radius arg1], :req-args-fixed ["GEORADIUS_RO" key longitude latitude radius arg1], :fn-docstring "Returns members from a geospatial index that are within a distance from a coordinate..\n\nGEORADIUS_RO key longitude latitude radius unit [withcoord] [withdist] [withhash] [count-block] [order]\n\nAvailable since: 3.2.10.\n\nTime complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index."}
"GEOSEARCH" {:fn-name "geosearch", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 arg3 arg4 arg5 & args], :fn-params-fixed [key arg1 arg2 arg3 arg4 arg5], :req-args-fixed ["GEOSEARCH" key arg1 arg2 arg3 arg4 arg5], :fn-docstring "Queries a geospatial index for members inside an area of a box or a circle..\n\nGEOSEARCH key from by [order] [count-block] [withcoord] [withdist] [withhash]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape"}
"GEOSEARCHSTORE" {:fn-name "geosearchstore", :cluster-key-idx 1, :fn-params-more [destination source arg1 arg2 arg3 arg4 arg5 & args], :fn-params-fixed [destination source arg1 arg2 arg3 arg4 arg5], :req-args-fixed ["GEOSEARCHSTORE" destination source arg1 arg2 arg3 arg4 arg5], :fn-docstring "Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result..\n\nGEOSEARCHSTORE destination source from by [order] [count-block] [storedist]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape"}
"GET" {:fn-name "get", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["GET" key], :fn-docstring "Returns the string value of a key..\n\nGET key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"GETBIT" {:fn-name "getbit", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key offset], :req-args-fixed ["GETBIT" key offset], :fn-docstring "Returns a bit value by offset..\n\nGETBIT key offset\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)"}
"GETDEL" {:fn-name "getdel", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["GETDEL" key], :fn-docstring "Returns the string value of a key after deleting the key..\n\nGETDEL key\n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"GETEX" {:fn-name "getex", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["GETEX" key], :fn-docstring "Returns the string value of a key after setting its expiration time..\n\nGETEX key [expiration]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"GETRANGE" {:fn-name "getrange", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start end], :req-args-fixed ["GETRANGE" key start end], :fn-docstring "Returns a substring of the string stored at a key..\n\nGETRANGE key start end\n\nAvailable since: 2.4.0.\n\nTime complexity: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings."}
"GETSET" {:fn-name "getset", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key value], :req-args-fixed ["GETSET" key value], :fn-docstring "Returns the previous string value of a key after setting it to a new value..\n\nGETSET key value\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"HDEL" {:fn-name "hdel", :cluster-key-idx 1, :fn-params-more [key field & args], :fn-params-fixed [key field], :req-args-fixed ["HDEL" key field], :fn-docstring "Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain..\n\nHDEL key field [field ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of fields to be removed."}
"HELLO" {:fn-name "hello", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["HELLO"], :fn-docstring "Handshakes with the Redis server..\n\nHELLO [arguments]\n\nAvailable since: 6.0.0.\n\nTime complexity: O(1)"}
"HEXISTS" {:fn-name "hexists", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field], :req-args-fixed ["HEXISTS" key field], :fn-docstring "Determines whether a field exists in a hash..\n\nHEXISTS key field\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)"}
"HGET" {:fn-name "hget", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field], :req-args-fixed ["HGET" key field], :fn-docstring "Returns the value of a field in a hash..\n\nHGET key field\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)"}
"HGETALL" {:fn-name "hgetall", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HGETALL" key], :fn-docstring "Returns all fields and values in a hash..\n\nHGETALL key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the size of the hash."}
"HINCRBY" {:fn-name "hincrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field increment], :req-args-fixed ["HINCRBY" key field increment], :fn-docstring "Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist..\n\nHINCRBY key field increment\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)"}
"HINCRBYFLOAT" {:fn-name "hincrbyfloat", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field increment], :req-args-fixed ["HINCRBYFLOAT" key field increment], :fn-docstring "Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist..\n\nHINCRBYFLOAT key field increment\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"HKEYS" {:fn-name "hkeys", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HKEYS" key], :fn-docstring "Returns all fields in a hash..\n\nHKEYS key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the size of the hash."}
"HLEN" {:fn-name "hlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HLEN" key], :fn-docstring "Returns the number of fields in a hash..\n\nHLEN key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)"}
"HMGET" {:fn-name "hmget", :cluster-key-idx 1, :fn-params-more [key field & args], :fn-params-fixed [key field], :req-args-fixed ["HMGET" key field], :fn-docstring "Returns the values of all fields in a hash..\n\nHMGET key field [field ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of fields being requested."}
"HMSET" {:fn-name "hmset", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["HMSET" key arg1 arg2], :fn-docstring "Sets the values of multiple fields..\n\nHMSET key data [data ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of fields being set."}
"HRANDFIELD" {:fn-name "hrandfield", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["HRANDFIELD" key], :fn-docstring "Returns one or more random fields from a hash..\n\nHRANDFIELD key [options]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N) where N is the number of fields returned"}
"HSCAN" {:fn-name "hscan", :cluster-key-idx 1, :fn-params-more [key cursor & args], :fn-params-fixed [key cursor], :req-args-fixed ["HSCAN" key cursor], :fn-docstring "Iterates over fields and values of a hash..\n\nHSCAN key cursor [pattern] [count]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection."}
"HSET" {:fn-name "hset", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["HSET" key arg1 arg2], :fn-docstring "Creates or modifies the value of a field in a hash..\n\nHSET key data [data ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs."}
"HSETNX" {:fn-name "hsetnx", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field value], :req-args-fixed ["HSETNX" key field value], :fn-docstring "Sets the value of a field in a hash only when the field doesn't exist..\n\nHSETNX key field value\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)"}
"HSTRLEN" {:fn-name "hstrlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field], :req-args-fixed ["HSTRLEN" key field], :fn-docstring "Returns the length of the value of a field..\n\nHSTRLEN key field\n\nAvailable since: 3.2.0.\n\nTime complexity: O(1)"}
"HVALS" {:fn-name "hvals", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HVALS" key], :fn-docstring "Returns all values in a hash..\n\nHVALS key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the size of the hash."}
"INCR" {:fn-name "incr", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["INCR" key], :fn-docstring "Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist..\n\nINCR key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"INCRBY" {:fn-name "incrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key increment], :req-args-fixed ["INCRBY" key increment], :fn-docstring "Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist..\n\nINCRBY key increment\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"INCRBYFLOAT" {:fn-name "incrbyfloat", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key increment], :req-args-fixed ["INCRBYFLOAT" key increment], :fn-docstring "Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist..\n\nINCRBYFLOAT key increment\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"INFO" {:fn-name "info", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["INFO"], :fn-docstring "Returns information and statistics about the server..\n\nINFO [section [section ...]]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"KEYS" {:fn-name "keys", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [pattern], :req-args-fixed ["KEYS" pattern], :fn-docstring "Returns all key names that match a pattern..\n\nKEYS pattern\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length."}
"LASTSAVE" {:fn-name "lastsave", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LASTSAVE"], :fn-docstring "Returns the Unix timestamp of the last successful save to disk..\n\nLASTSAVE \n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"LATENCY" {:fn-name "latency", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["LATENCY" arg1], :fn-docstring "A container for latency diagnostics commands..\n\nLATENCY \n\nAvailable since: 2.8.13.\n\nTime complexity: Depends on subcommand."}
"LATENCY DOCTOR" {:fn-name "latency-doctor", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LATENCY" "DOCTOR"], :fn-docstring "Returns a human-readable latency analysis report..\n\nLATENCY DOCTOR \n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)"}
"LATENCY GRAPH" {:fn-name "latency-graph", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [event], :req-args-fixed ["LATENCY" "GRAPH" event], :fn-docstring "Returns a latency graph for an event..\n\nLATENCY GRAPH event\n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)"}
"LATENCY HELP" {:fn-name "latency-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LATENCY" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nLATENCY HELP \n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)"}
"LATENCY HISTOGRAM" {:fn-name "latency-histogram", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["LATENCY" "HISTOGRAM"], :fn-docstring "Returns the cumulative distribution of latencies of a subset or all commands..\n\nLATENCY HISTOGRAM [command [command ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of commands with latency information being retrieved."}
"LATENCY HISTORY" {:fn-name "latency-history", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [event], :req-args-fixed ["LATENCY" "HISTORY" event], :fn-docstring "Returns timestamp-latency samples for an event..\n\nLATENCY HISTORY event\n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)"}
"LATENCY LATEST" {:fn-name "latency-latest", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LATENCY" "LATEST"], :fn-docstring "Returns the latest latency samples for all events..\n\nLATENCY LATEST \n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)"}
"LATENCY RESET" {:fn-name "latency-reset", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["LATENCY" "RESET"], :fn-docstring "Resets the latency data for one or more events..\n\nLATENCY RESET [event [event ...]]\n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)"}
"LCS" {:fn-name "lcs", :cluster-key-idx 1, :fn-params-more [key1 key2 & args], :fn-params-fixed [key1 key2], :req-args-fixed ["LCS" key1 key2], :fn-docstring "Finds the longest common substring..\n\nLCS key1 key2 [len] [idx] [min-match-len] [withmatchlen]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N*M) where N and M are the lengths of s1 and s2, respectively"}
"LINDEX" {:fn-name "lindex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key index], :req-args-fixed ["LINDEX" key index], :fn-docstring "Returns an element from a list by its index..\n\nLINDEX key index\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1)."}
"LINSERT" {:fn-name "linsert", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key arg1 arg2 arg3], :req-args-fixed ["LINSERT" key arg1 arg2 arg3], :fn-docstring "Inserts an element before or after another element in a list..\n\nLINSERT key where pivot element\n\nAvailable since: 2.2.0.\n\nTime complexity: O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N)."}
"LLEN" {:fn-name "llen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["LLEN" key], :fn-docstring "Returns the length of a list..\n\nLLEN key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"LMOVE" {:fn-name "lmove", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination arg1 arg2], :req-args-fixed ["LMOVE" source destination arg1 arg2], :fn-docstring "Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved..\n\nLMOVE source destination wherefrom whereto\n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"LMPOP" {:fn-name "lmpop", :cluster-key-idx 1, :fn-params-more [numkeys key arg1 & args], :fn-params-fixed [numkeys key arg1], :req-args-fixed ["LMPOP" numkeys key arg1], :fn-docstring "Returns multiple elements from a list after removing them. Deletes the list if the last element was popped..\n\nLMPOP numkeys key [key ...] where [count]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned."}
"LOLWUT" {:fn-name "lolwut", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["LOLWUT"], :fn-docstring "Displays computer art and the Redis version.\n\nLOLWUT [version]\n\nAvailable since: 5.0.0.\n\n"}
"LPOP" {:fn-name "lpop", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["LPOP" key], :fn-docstring "Returns the first elements in a list after removing it. Deletes the list if the last element was popped..\n\nLPOP key [count]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of elements returned"}
"LPOS" {:fn-name "lpos", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["LPOS" key element], :fn-docstring "Returns the index of matching elements in a list..\n\nLPOS key element [rank] [num-matches] [len]\n\nAvailable since: 6.0.6.\n\nTime complexity: O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time."}
"LPUSH" {:fn-name "lpush", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["LPUSH" key element], :fn-docstring "Prepends one or more elements to a list. Creates the key if it doesn't exist..\n\nLPUSH key element [element ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments."}
"LPUSHX" {:fn-name "lpushx", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["LPUSHX" key element], :fn-docstring "Prepends one or more elements to a list only when the list exists..\n\nLPUSHX key element [element ...]\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments."}
"LRANGE" {:fn-name "lrange", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start stop], :req-args-fixed ["LRANGE" key start stop], :fn-docstring "Returns a range of elements from a list..\n\nLRANGE key start stop\n\nAvailable since: 1.0.0.\n\nTime complexity: O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range."}
"LREM" {:fn-name "lrem", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key count element], :req-args-fixed ["LREM" key count element], :fn-docstring "Removes elements from a list. Deletes the list if the last element was removed..\n\nLREM key count element\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N+M) where N is the length of the list and M is the number of elements removed."}
"LSET" {:fn-name "lset", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key index element], :req-args-fixed ["LSET" key index element], :fn-docstring "Sets the value of an element in a list by its index..\n\nLSET key index element\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1)."}
"LTRIM" {:fn-name "ltrim", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start stop], :req-args-fixed ["LTRIM" key start stop], :fn-docstring "Removes elements from both ends a list. Deletes the list if all elements were trimmed..\n\nLTRIM key start stop\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of elements to be removed by the operation."}
"MEMORY" {:fn-name "memory", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["MEMORY" arg1], :fn-docstring "A container for memory diagnostics commands..\n\nMEMORY \n\nAvailable since: 4.0.0.\n\nTime complexity: Depends on subcommand."}
"MEMORY DOCTOR" {:fn-name "memory-doctor", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "DOCTOR"], :fn-docstring "Outputs a memory problems report..\n\nMEMORY DOCTOR \n\nAvailable since: 4.0.0.\n\nTime complexity: O(1)"}
"MEMORY HELP" {:fn-name "memory-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nMEMORY HELP \n\nAvailable since: 4.0.0.\n\nTime complexity: O(1)"}
"MEMORY MALLOC-STATS" {:fn-name "memory-malloc-stats", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "MALLOC-STATS"], :fn-docstring "Returns the allocator statistics..\n\nMEMORY MALLOC-STATS \n\nAvailable since: 4.0.0.\n\nTime complexity: Depends on how much memory is allocated, could be slow"}
"MEMORY PURGE" {:fn-name "memory-purge", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "PURGE"], :fn-docstring "Asks the allocator to release memory..\n\nMEMORY PURGE \n\nAvailable since: 4.0.0.\n\nTime complexity: Depends on how much memory is allocated, could be slow"}
"MEMORY STATS" {:fn-name "memory-stats", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "STATS"], :fn-docstring "Returns details about memory usage..\n\nMEMORY STATS \n\nAvailable since: 4.0.0.\n\nTime complexity: O(1)"}
"MEMORY USAGE" {:fn-name "memory-usage", :cluster-key-idx 2, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["MEMORY" "USAGE" key], :fn-docstring "Estimates the memory usage of a key..\n\nMEMORY USAGE key [count]\n\nAvailable since: 4.0.0.\n\nTime complexity: O(N) where N is the number of samples."}
"MGET" {:fn-name "mget", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["MGET" key], :fn-docstring "Atomically returns the string values of one or more keys..\n\nMGET key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of keys to retrieve."}
"MIGRATE" {:fn-name "migrate", :cluster-key-idx 1, :fn-params-more [host port arg1 arg2 arg3 & args], :fn-params-fixed [host port arg1 arg2 arg3], :req-args-fixed ["MIGRATE" host port arg1 arg2 arg3], :fn-docstring "Atomically transfers a key from one Redis instance to another..\n\nMIGRATE host port key-selector destination-db timeout [copy] [replace] [authentication] [keys [keys ...]]\n\nAvailable since: 2.6.0.\n\nTime complexity: This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed."}
"MODULE" {:fn-name "module", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["MODULE" arg1], :fn-docstring "A container for module commands..\n\nMODULE \n\nAvailable since: 4.0.0.\n\nTime complexity: Depends on subcommand."}
"MODULE HELP" {:fn-name "module-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MODULE" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nMODULE HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"MODULE LIST" {:fn-name "module-list", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MODULE" "LIST"], :fn-docstring "Returns all loaded modules..\n\nMODULE LIST \n\nAvailable since: 4.0.0.\n\nTime complexity: O(N) where N is the number of loaded modules."}
"MODULE LOAD" {:fn-name "module-load", :cluster-key-idx 2, :fn-params-more [path & args], :fn-params-fixed [path], :req-args-fixed ["MODULE" "LOAD" path], :fn-docstring "Loads a module..\n\nMODULE LOAD path [arg [arg ...]]\n\nAvailable since: 4.0.0.\n\nTime complexity: O(1)"}
"MODULE LOADEX" {:fn-name "module-loadex", :cluster-key-idx 2, :fn-params-more [path & args], :fn-params-fixed [path], :req-args-fixed ["MODULE" "LOADEX" path], :fn-docstring "Loads a module using extended parameters..\n\nMODULE LOADEX path [configs [configs ...]] [args [args ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"MODULE UNLOAD" {:fn-name "module-unload", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [name], :req-args-fixed ["MODULE" "UNLOAD" name], :fn-docstring "Unloads a module..\n\nMODULE UNLOAD name\n\nAvailable since: 4.0.0.\n\nTime complexity: O(1)"}
"MONITOR" {:fn-name "monitor", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MONITOR"], :fn-docstring "Listens for all requests received by the server in real-time..\n\nMONITOR \n\nAvailable since: 1.0.0.\n\n"}
"MOVE" {:fn-name "move", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key db], :req-args-fixed ["MOVE" key db], :fn-docstring "Moves a key to another database..\n\nMOVE key db\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"MSET" {:fn-name "mset", :cluster-key-idx 1, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["MSET" arg1 arg2], :fn-docstring "Atomically creates or modifies the string values of one or more keys..\n\nMSET data [data ...]\n\nAvailable since: 1.0.1.\n\nTime complexity: O(N) where N is the number of keys to set."}
"MSETNX" {:fn-name "msetnx", :cluster-key-idx 1, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["MSETNX" arg1 arg2], :fn-docstring "Atomically modifies the string values of one or more keys only when all keys don't exist..\n\nMSETNX data [data ...]\n\nAvailable since: 1.0.1.\n\nTime complexity: O(N) where N is the number of keys to set."}
"MULTI" {:fn-name "multi", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MULTI"], :fn-docstring "Starts a transaction..\n\nMULTI \n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)"}
"OBJECT" {:fn-name "object", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["OBJECT" arg1], :fn-docstring "A container for object introspection commands..\n\nOBJECT \n\nAvailable since: 2.2.3.\n\nTime complexity: Depends on subcommand."}
"OBJECT ENCODING" {:fn-name "object-encoding", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "ENCODING" key], :fn-docstring "Returns the internal encoding of a Redis object..\n\nOBJECT ENCODING key\n\nAvailable since: 2.2.3.\n\nTime complexity: O(1)"}
"OBJECT FREQ" {:fn-name "object-freq", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "FREQ" key], :fn-docstring "Returns the logarithmic access frequency counter of a Redis object..\n\nOBJECT FREQ key\n\nAvailable since: 4.0.0.\n\nTime complexity: O(1)"}
"OBJECT HELP" {:fn-name "object-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["OBJECT" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nOBJECT HELP \n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"OBJECT IDLETIME" {:fn-name "object-idletime", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "IDLETIME" key], :fn-docstring "Returns the time since the last access to a Redis object..\n\nOBJECT IDLETIME key\n\nAvailable since: 2.2.3.\n\nTime complexity: O(1)"}
"OBJECT REFCOUNT" {:fn-name "object-refcount", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "REFCOUNT" key], :fn-docstring "Returns the reference count of a value of a key..\n\nOBJECT REFCOUNT key\n\nAvailable since: 2.2.3.\n\nTime complexity: O(1)"}
"PERSIST" {:fn-name "persist", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["PERSIST" key], :fn-docstring "Removes the expiration time of a key..\n\nPERSIST key\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)"}
"PEXPIRE" {:fn-name "pexpire", :cluster-key-idx 1, :fn-params-more [key milliseconds & args], :fn-params-fixed [key milliseconds], :req-args-fixed ["PEXPIRE" key milliseconds], :fn-docstring "Sets the expiration time of a key in milliseconds..\n\nPEXPIRE key milliseconds [condition]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"PEXPIREAT" {:fn-name "pexpireat", :cluster-key-idx 1, :fn-params-more [key unix-time-milliseconds & args], :fn-params-fixed [key unix-time-milliseconds], :req-args-fixed ["PEXPIREAT" key unix-time-milliseconds], :fn-docstring "Sets the expiration time of a key to a Unix milliseconds timestamp..\n\nPEXPIREAT key unix-time-milliseconds [condition]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"PEXPIRETIME" {:fn-name "pexpiretime", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["PEXPIRETIME" key], :fn-docstring "Returns the expiration time of a key as a Unix milliseconds timestamp..\n\nPEXPIRETIME key\n\nAvailable since: 7.0.0.\n\nTime complexity: O(1)"}
"PFADD" {:fn-name "pfadd", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["PFADD" key], :fn-docstring "Adds elements to a HyperLogLog key. Creates the key if it doesn't exist..\n\nPFADD key [element [element ...]]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(1) to add every element."}
"PFCOUNT" {:fn-name "pfcount", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["PFCOUNT" key], :fn-docstring "Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s)..\n\nPFCOUNT key [key ...]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys."}
"PFDEBUG" {:fn-name "pfdebug", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [subcommand key], :req-args-fixed ["PFDEBUG" subcommand key], :fn-docstring "Internal commands for debugging HyperLogLog values..\n\nPFDEBUG subcommand key\n\nAvailable since: 2.8.9.\n\nTime complexity: N/A"}
"PFMERGE" {:fn-name "pfmerge", :cluster-key-idx 1, :fn-params-more [destkey & args], :fn-params-fixed [destkey], :req-args-fixed ["PFMERGE" destkey], :fn-docstring "Merges one or more HyperLogLog values into a single key..\n\nPFMERGE destkey [sourcekey [sourcekey ...]]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(N) to merge N HyperLogLogs, but with high constant times."}
"PFSELFTEST" {:fn-name "pfselftest", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["PFSELFTEST"], :fn-docstring "An internal command for testing HyperLogLog values..\n\nPFSELFTEST \n\nAvailable since: 2.8.9.\n\nTime complexity: N/A"}
"PING" {:fn-name "ping", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PING"], :fn-docstring "Returns the server's liveliness response..\n\nPING [message]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"PSETEX" {:fn-name "psetex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key milliseconds value], :req-args-fixed ["PSETEX" key milliseconds value], :fn-docstring "Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist..\n\nPSETEX key milliseconds value\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"PSUBSCRIBE" {:fn-name "psubscribe", :cluster-key-idx 1, :fn-params-more [pattern & args], :fn-params-fixed [pattern], :req-args-fixed ["PSUBSCRIBE" pattern], :fn-docstring "Listens for messages published to channels that match one or more patterns..\n\nPSUBSCRIBE pattern [pattern ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of patterns to subscribe to."}
"PSYNC" {:fn-name "psync", :cluster-key-idx 1, :fn-params-more [replicationid offset & args], :fn-params-fixed [replicationid offset], :req-args-fixed ["PSYNC" replicationid offset], :fn-docstring "An internal command used in replication..\n\nPSYNC replicationid offset\n\nAvailable since: 2.8.0.\n\n"}
"PTTL" {:fn-name "pttl", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["PTTL" key], :fn-docstring "Returns the expiration time in milliseconds of a key..\n\nPTTL key\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"PUBLISH" {:fn-name "publish", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [channel message], :req-args-fixed ["PUBLISH" channel message], :fn-docstring "Posts a message to a channel..\n\nPUBLISH channel message\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client)."}
"PUBSUB" {:fn-name "pubsub", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["PUBSUB" arg1], :fn-docstring "A container for Pub/Sub commands..\n\nPUBSUB \n\nAvailable since: 2.8.0.\n\nTime complexity: Depends on subcommand."}
"PUBSUB CHANNELS" {:fn-name "pubsub-channels", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "CHANNELS"], :fn-docstring "Returns the active channels..\n\nPUBSUB CHANNELS [pattern]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)"}
"PUBSUB HELP" {:fn-name "pubsub-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["PUBSUB" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nPUBSUB HELP \n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"PUBSUB NUMPAT" {:fn-name "pubsub-numpat", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["PUBSUB" "NUMPAT"], :fn-docstring "Returns a count of unique pattern subscriptions..\n\nPUBSUB NUMPAT \n\nAvailable since: 2.8.0.\n\nTime complexity: O(1)"}
"PUBSUB NUMSUB" {:fn-name "pubsub-numsub", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "NUMSUB"], :fn-docstring "Returns a count of subscribers to channels..\n\nPUBSUB NUMSUB [channel [channel ...]]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(N) for the NUMSUB subcommand, where N is the number of requested channels"}
"PUBSUB SHARDCHANNELS" {:fn-name "pubsub-shardchannels", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "SHARDCHANNELS"], :fn-docstring "Returns the active shard channels..\n\nPUBSUB SHARDCHANNELS [pattern]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels)."}
"PUBSUB SHARDNUMSUB" {:fn-name "pubsub-shardnumsub", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "SHARDNUMSUB"], :fn-docstring "Returns the count of subscribers of shard channels..\n\nPUBSUB SHARDNUMSUB [shardchannel [shardchannel ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels"}
"PUNSUBSCRIBE" {:fn-name "punsubscribe", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUNSUBSCRIBE"], :fn-docstring "Stops listening to messages published to channels that match one or more patterns..\n\nPUNSUBSCRIBE [pattern [pattern ...]]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of patterns to unsubscribe."}
"QUIT" {:fn-name "quit", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["QUIT"], :fn-docstring "Closes the connection..\n\nQUIT \n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"RANDOMKEY" {:fn-name "randomkey", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["RANDOMKEY"], :fn-docstring "Returns a random key name from the database..\n\nRANDOMKEY \n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"READONLY" {:fn-name "readonly", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["READONLY"], :fn-docstring "Enables read-only queries for a connection to a Redis Cluster replica node..\n\nREADONLY \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"READWRITE" {:fn-name "readwrite", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["READWRITE"], :fn-docstring "Enables read-write queries for a connection to a Reids Cluster replica node..\n\nREADWRITE \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"RENAME" {:fn-name "rename", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key newkey], :req-args-fixed ["RENAME" key newkey], :fn-docstring "Renames a key and overwrites the destination..\n\nRENAME key newkey\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"RENAMENX" {:fn-name "renamenx", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key newkey], :req-args-fixed ["RENAMENX" key newkey], :fn-docstring "Renames a key only when the target key name doesn't exist..\n\nRENAMENX key newkey\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"REPLCONF" {:fn-name "replconf", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["REPLCONF"], :fn-docstring "An internal command for configuring the replication stream..\n\nREPLCONF \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"REPLICAOF" {:fn-name "replicaof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [host port], :req-args-fixed ["REPLICAOF" host port], :fn-docstring "Configures a server as replica of another, or promotes it to a master..\n\nREPLICAOF host port\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"RESET" {:fn-name "reset", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["RESET"], :fn-docstring "Resets the connection..\n\nRESET \n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"RESTORE" {:fn-name "restore", :cluster-key-idx 1, :fn-params-more [key ttl serialized-value & args], :fn-params-fixed [key ttl serialized-value], :req-args-fixed ["RESTORE" key ttl serialized-value], :fn-docstring "Creates a key from the serialized representation of a value..\n\nRESTORE key ttl serialized-value [replace] [absttl] [seconds] [frequency]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N))."}
"RESTORE-ASKING" {:fn-name "restore-asking", :cluster-key-idx 1, :fn-params-more [key ttl serialized-value & args], :fn-params-fixed [key ttl serialized-value], :req-args-fixed ["RESTORE-ASKING" key ttl serialized-value], :fn-docstring "An internal command for migrating keys in a cluster..\n\nRESTORE-ASKING key ttl serialized-value [replace] [absttl] [seconds] [frequency]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N))."}
"ROLE" {:fn-name "role", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ROLE"], :fn-docstring "Returns the replication role..\n\nROLE \n\nAvailable since: 2.8.12.\n\nTime complexity: O(1)"}
"RPOP" {:fn-name "rpop", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["RPOP" key], :fn-docstring "Returns and removes the last elements of a list. Deletes the list if the last element was popped..\n\nRPOP key [count]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of elements returned"}
"RPOPLPUSH" {:fn-name "rpoplpush", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination], :req-args-fixed ["RPOPLPUSH" source destination], :fn-docstring "Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped..\n\nRPOPLPUSH source destination\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)"}
"RPUSH" {:fn-name "rpush", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["RPUSH" key element], :fn-docstring "Appends one or more elements to a list. Creates the key if it doesn't exist..\n\nRPUSH key element [element ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments."}
"RPUSHX" {:fn-name "rpushx", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["RPUSHX" key element], :fn-docstring "Appends an element to a list only when the list exists..\n\nRPUSHX key element [element ...]\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments."}
"SADD" {:fn-name "sadd", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["SADD" key member], :fn-docstring "Adds one or more members to a set. Creates the key if it doesn't exist..\n\nSADD key member [member ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments."}
"SAVE" {:fn-name "save", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SAVE"], :fn-docstring "Synchronously saves the database(s) to disk..\n\nSAVE \n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of keys in all databases"}
"SCAN" {:fn-name "scan", :cluster-key-idx 1, :fn-params-more [cursor & args], :fn-params-fixed [cursor], :req-args-fixed ["SCAN" cursor], :fn-docstring "Iterates over the key names in the database..\n\nSCAN cursor [pattern] [count] [type]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection."}
"SCARD" {:fn-name "scard", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["SCARD" key], :fn-docstring "Returns the number of members in a set..\n\nSCARD key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"SCRIPT" {:fn-name "script", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["SCRIPT" arg1], :fn-docstring "A container for Lua scripts management commands..\n\nSCRIPT \n\nAvailable since: 2.6.0.\n\nTime complexity: Depends on subcommand."}
"SCRIPT DEBUG" {:fn-name "script-debug", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["SCRIPT" "DEBUG" arg1], :fn-docstring "Sets the debug mode of server-side Lua scripts..\n\nSCRIPT DEBUG mode\n\nAvailable since: 3.2.0.\n\nTime complexity: O(1)"}
"SCRIPT EXISTS" {:fn-name "script-exists", :cluster-key-idx 2, :fn-params-more [sha1 & args], :fn-params-fixed [sha1], :req-args-fixed ["SCRIPT" "EXISTS" sha1], :fn-docstring "Determines whether server-side Lua scripts exist in the script cache..\n\nSCRIPT EXISTS sha1 [sha1 ...]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation)."}
"SCRIPT FLUSH" {:fn-name "script-flush", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SCRIPT" "FLUSH"], :fn-docstring "Removes all server-side Lua scripts from the script cache..\n\nSCRIPT FLUSH [flush-type]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N) with N being the number of scripts in cache"}
"SCRIPT HELP" {:fn-name "script-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SCRIPT" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nSCRIPT HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"SCRIPT KILL" {:fn-name "script-kill", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SCRIPT" "KILL"], :fn-docstring "Terminates a server-side Lua script during execution..\n\nSCRIPT KILL \n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"SCRIPT LOAD" {:fn-name "script-load", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [script], :req-args-fixed ["SCRIPT" "LOAD" script], :fn-docstring "Loads a server-side Lua script to the script cache..\n\nSCRIPT LOAD script\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N) with N being the length in bytes of the script body."}
"SDIFF" {:fn-name "sdiff", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SDIFF" key], :fn-docstring "Returns the difference of multiple sets..\n\nSDIFF key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets."}
"SDIFFSTORE" {:fn-name "sdiffstore", :cluster-key-idx 1, :fn-params-more [destination key & args], :fn-params-fixed [destination key], :req-args-fixed ["SDIFFSTORE" destination key], :fn-docstring "Stores the difference of multiple sets in a key..\n\nSDIFFSTORE destination key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets."}
"SELECT" {:fn-name "select", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [index], :req-args-fixed ["SELECT" index], :fn-docstring "Changes the selected database..\n\nSELECT index\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"SET" {:fn-name "set", :cluster-key-idx 1, :fn-params-more [key value & args], :fn-params-fixed [key value], :req-args-fixed ["SET" key value], :fn-docstring "Sets the string value of a key, ignoring its type. The key is created if it doesn't exist..\n\nSET key value [condition] [get] [expiration]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"SETBIT" {:fn-name "setbit", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key offset value], :req-args-fixed ["SETBIT" key offset value], :fn-docstring "Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist..\n\nSETBIT key offset value\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)"}
"SETEX" {:fn-name "setex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key seconds value], :req-args-fixed ["SETEX" key seconds value], :fn-docstring "Sets the string value and expiration time of a key. Creates the key if it doesn't exist..\n\nSETEX key seconds value\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)"}
"SETNX" {:fn-name "setnx", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key value], :req-args-fixed ["SETNX" key value], :fn-docstring "Set the string value of a key only when the key doesn't exist..\n\nSETNX key value\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"SETRANGE" {:fn-name "setrange", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key offset value], :req-args-fixed ["SETRANGE" key offset value], :fn-docstring "Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist..\n\nSETRANGE key offset value\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument."}
"SHUTDOWN" {:fn-name "shutdown", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SHUTDOWN"], :fn-docstring "Synchronously saves the database(s) to disk and shuts down the Redis server..\n\nSHUTDOWN [save-selector] [now] [force] [abort]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)"}
"SINTER" {:fn-name "sinter", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SINTER" key], :fn-docstring "Returns the intersect of multiple sets..\n\nSINTER key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets."}
"SINTERCARD" {:fn-name "sintercard", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["SINTERCARD" numkeys key], :fn-docstring "Returns the number of members of the intersect of multiple sets..\n\nSINTERCARD numkeys key [key ...] [limit]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets."}
"SINTERSTORE" {:fn-name "sinterstore", :cluster-key-idx 1, :fn-params-more [destination key & args], :fn-params-fixed [destination key], :req-args-fixed ["SINTERSTORE" destination key], :fn-docstring "Stores the intersect of multiple sets in a key..\n\nSINTERSTORE destination key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets."}
"SISMEMBER" {:fn-name "sismember", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key member], :req-args-fixed ["SISMEMBER" key member], :fn-docstring "Determines whether a member belongs to a set..\n\nSISMEMBER key member\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"SLAVEOF" {:fn-name "slaveof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [host port], :req-args-fixed ["SLAVEOF" host port], :fn-docstring "Sets a Redis server as a replica of another, or promotes it to being a master..\n\nSLAVEOF host port\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"SLOWLOG" {:fn-name "slowlog", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["SLOWLOG" arg1], :fn-docstring "A container for slow log commands..\n\nSLOWLOG \n\nAvailable since: 2.2.12.\n\nTime complexity: Depends on subcommand."}
"SLOWLOG GET" {:fn-name "slowlog-get", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "GET"], :fn-docstring "Returns the slow log's entries..\n\nSLOWLOG GET [count]\n\nAvailable since: 2.2.12.\n\nTime complexity: O(N) where N is the number of entries returned"}
"SLOWLOG HELP" {:fn-name "slowlog-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "HELP"], :fn-docstring "Show helpful text about the different subcommands.\n\nSLOWLOG HELP \n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"SLOWLOG LEN" {:fn-name "slowlog-len", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "LEN"], :fn-docstring "Returns the number of entries in the slow log..\n\nSLOWLOG LEN \n\nAvailable since: 2.2.12.\n\nTime complexity: O(1)"}
"SLOWLOG RESET" {:fn-name "slowlog-reset", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "RESET"], :fn-docstring "Clears all entries from the slow log..\n\nSLOWLOG RESET \n\nAvailable since: 2.2.12.\n\nTime complexity: O(N) where N is the number of entries in the slowlog"}
"SMEMBERS" {:fn-name "smembers", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["SMEMBERS" key], :fn-docstring "Returns all members of a set..\n\nSMEMBERS key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the set cardinality."}
"SMISMEMBER" {:fn-name "smismember", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["SMISMEMBER" key member], :fn-docstring "Determines whether multiple members belong to a set..\n\nSMISMEMBER key member [member ...]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N) where N is the number of elements being checked for membership"}
"SMOVE" {:fn-name "smove", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination member], :req-args-fixed ["SMOVE" source destination member], :fn-docstring "Moves a member from one set to another..\n\nSMOVE source destination member\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"SORT" {:fn-name "sort", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SORT" key], :fn-docstring "Sorts the elements in a list, a set, or a sorted set, optionally storing the result..\n\nSORT key [by-pattern] [limit] [get-pattern [get-pattern ...]] [order] [sorting] [destination]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N)."}
"SORT_RO" {:fn-name "sort_ro", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SORT_RO" key], :fn-docstring "Returns the sorted elements of a list, a set, or a sorted set..\n\nSORT_RO key [by-pattern] [limit] [get-pattern [get-pattern ...]] [order] [sorting]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N)."}
"SPOP" {:fn-name "spop", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SPOP" key], :fn-docstring "Returns one or more random members from a set after removing them. Deletes the set if the last member was popped..\n\nSPOP key [count]\n\nAvailable since: 1.0.0.\n\nTime complexity: Without the count argument O(1), otherwise O(N) where N is the value of the passed count."}
"SPUBLISH" {:fn-name "spublish", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [shardchannel message], :req-args-fixed ["SPUBLISH" shardchannel message], :fn-docstring "Post a message to a shard channel.\n\nSPUBLISH shardchannel message\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of clients subscribed to the receiving shard channel."}
"SRANDMEMBER" {:fn-name "srandmember", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SRANDMEMBER" key], :fn-docstring "Get one or multiple random members from a set.\n\nSRANDMEMBER key [count]\n\nAvailable since: 1.0.0.\n\nTime complexity: Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count."}
"SREM" {:fn-name "srem", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["SREM" key member], :fn-docstring "Removes one or more members from a set. Deletes the set if the last member was removed..\n\nSREM key member [member ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of members to be removed."}
"SSCAN" {:fn-name "sscan", :cluster-key-idx 1, :fn-params-more [key cursor & args], :fn-params-fixed [key cursor], :req-args-fixed ["SSCAN" key cursor], :fn-docstring "Iterates over members of a set..\n\nSSCAN key cursor [pattern] [count]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection."}
"SSUBSCRIBE" {:fn-name "ssubscribe", :cluster-key-idx 1, :fn-params-more [shardchannel & args], :fn-params-fixed [shardchannel], :req-args-fixed ["SSUBSCRIBE" shardchannel], :fn-docstring "Listens for messages published to shard channels..\n\nSSUBSCRIBE shardchannel [shardchannel ...]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of shard channels to subscribe to."}
"STRLEN" {:fn-name "strlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["STRLEN" key], :fn-docstring "Returns the length of a string value..\n\nSTRLEN key\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)"}
"SUBSCRIBE" {:fn-name "subscribe", :cluster-key-idx 1, :fn-params-more [channel & args], :fn-params-fixed [channel], :req-args-fixed ["SUBSCRIBE" channel], :fn-docstring "Listens for messages published to channels..\n\nSUBSCRIBE channel [channel ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of channels to subscribe to."}
"SUBSTR" {:fn-name "substr", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start end], :req-args-fixed ["SUBSTR" key start end], :fn-docstring "Returns a substring from a string value..\n\nSUBSTR key start end\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings."}
"SUNION" {:fn-name "sunion", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SUNION" key], :fn-docstring "Returns the union of multiple sets..\n\nSUNION key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets."}
"SUNIONSTORE" {:fn-name "sunionstore", :cluster-key-idx 1, :fn-params-more [destination key & args], :fn-params-fixed [destination key], :req-args-fixed ["SUNIONSTORE" destination key], :fn-docstring "Stores the union of multiple sets in a key..\n\nSUNIONSTORE destination key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets."}
"SUNSUBSCRIBE" {:fn-name "sunsubscribe", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SUNSUBSCRIBE"], :fn-docstring "Stops listening to messages posted to shard channels..\n\nSUNSUBSCRIBE [shardchannel [shardchannel ...]]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N) where N is the number of shard channels to unsubscribe."}
"SWAPDB" {:fn-name "swapdb", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [index1 index2], :req-args-fixed ["SWAPDB" index1 index2], :fn-docstring "Swaps two Redis databases..\n\nSWAPDB index1 index2\n\nAvailable since: 4.0.0.\n\nTime complexity: O(N) where N is the count of clients watching or blocking on keys from both databases."}
"SYNC" {:fn-name "sync", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SYNC"], :fn-docstring "An internal command used in replication..\n\nSYNC \n\nAvailable since: 1.0.0.\n\n"}
"TIME" {:fn-name "time", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["TIME"], :fn-docstring "Returns the server time..\n\nTIME \n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)"}
"TOUCH" {:fn-name "touch", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["TOUCH" key], :fn-docstring "Returns the number of existing keys out of those specified after updating the time they were last accessed..\n\nTOUCH key [key ...]\n\nAvailable since: 3.2.1.\n\nTime complexity: O(N) where N is the number of keys that will be touched."}
"TTL" {:fn-name "ttl", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["TTL" key], :fn-docstring "Returns the expiration time in seconds of a key..\n\nTTL key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"TYPE" {:fn-name "type", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["TYPE" key], :fn-docstring "Determines the type of value stored at a key..\n\nTYPE key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)"}
"UNLINK" {:fn-name "unlink", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["UNLINK" key], :fn-docstring "Asynchronously deletes one or more keys..\n\nUNLINK key [key ...]\n\nAvailable since: 4.0.0.\n\nTime complexity: O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of."}
"UNSUBSCRIBE" {:fn-name "unsubscribe", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["UNSUBSCRIBE"], :fn-docstring "Stops listening to messages posted to channels..\n\nUNSUBSCRIBE [channel [channel ...]]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of channels to unsubscribe."}
"UNWATCH" {:fn-name "unwatch", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["UNWATCH"], :fn-docstring "Forgets about watched keys of a transaction..\n\nUNWATCH \n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)"}
"WAIT" {:fn-name "wait", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [numreplicas timeout], :req-args-fixed ["WAIT" numreplicas timeout], :fn-docstring "Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed..\n\nWAIT numreplicas timeout\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)"}
"WAITAOF" {:fn-name "waitaof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [numlocal numreplicas timeout], :req-args-fixed ["WAITAOF" numlocal numreplicas timeout], :fn-docstring "Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas..\n\nWAITAOF numlocal numreplicas timeout\n\nAvailable since: 7.2.0.\n\nTime complexity: O(1)"}
"WATCH" {:fn-name "watch", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["WATCH" key], :fn-docstring "Monitors changes to keys to determine the execution of a transaction..\n\nWATCH key [key ...]\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1) for every key."}
"XACK" {:fn-name "xack", :cluster-key-idx 1, :fn-params-more [key group id & args], :fn-params-fixed [key group id], :req-args-fixed ["XACK" key group id], :fn-docstring "Returns the number of messages that were successfully acknowledged by the consumer group member of a stream..\n\nXACK key group id [id ...]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1) for each message ID processed."}
"XADD" {:fn-name "xadd", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 arg3 & args], :fn-params-fixed [key arg1 arg2 arg3], :req-args-fixed ["XADD" key arg1 arg2 arg3], :fn-docstring "Appends a new message to a stream. Creates the key if it doesn't exist..\n\nXADD key [nomkstream] [trim] id-selector data [data ...]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted."}
"XAUTOCLAIM" {:fn-name "xautoclaim", :cluster-key-idx 1, :fn-params-more [key group consumer min-idle-time start & args], :fn-params-fixed [key group consumer min-idle-time start], :req-args-fixed ["XAUTOCLAIM" key group consumer min-idle-time start], :fn-docstring "Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member..\n\nXAUTOCLAIM key group consumer min-idle-time start [count] [justid]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(1) if COUNT is small."}
"XCLAIM" {:fn-name "xclaim", :cluster-key-idx 1, :fn-params-more [key group consumer min-idle-time id & args], :fn-params-fixed [key group consumer min-idle-time id], :req-args-fixed ["XCLAIM" key group consumer min-idle-time id], :fn-docstring "Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member..\n\nXCLAIM key group consumer min-idle-time id [id ...] [ms] [unix-time-milliseconds] [count] [force] [justid] [lastid]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log N) with N being the number of messages in the PEL of the consumer group."}
"XDEL" {:fn-name "xdel", :cluster-key-idx 1, :fn-params-more [key id & args], :fn-params-fixed [key id], :req-args-fixed ["XDEL" key id], :fn-docstring "Returns the number of messages after removing them from a stream..\n\nXDEL key id [id ...]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1) for each single item to delete in the stream, regardless of the stream size."}
"XGROUP" {:fn-name "xgroup", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["XGROUP" arg1], :fn-docstring "A container for consumer groups commands..\n\nXGROUP \n\nAvailable since: 5.0.0.\n\nTime complexity: Depends on subcommand."}
"XGROUP CREATE" {:fn-name "xgroup-create", :cluster-key-idx 2, :fn-params-more [key group arg1 & args], :fn-params-fixed [key group arg1], :req-args-fixed ["XGROUP" "CREATE" key group arg1], :fn-docstring "Creates a consumer group..\n\nXGROUP CREATE key group id-selector [mkstream] [entries-read]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XGROUP CREATECONSUMER" {:fn-name "xgroup-createconsumer", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group consumer], :req-args-fixed ["XGROUP" "CREATECONSUMER" key group consumer], :fn-docstring "Creates a consumer in a consumer group..\n\nXGROUP CREATECONSUMER key group consumer\n\nAvailable since: 6.2.0.\n\nTime complexity: O(1)"}
"XGROUP DELCONSUMER" {:fn-name "xgroup-delconsumer", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group consumer], :req-args-fixed ["XGROUP" "DELCONSUMER" key group consumer], :fn-docstring "Deletes a consumer from a consumer group..\n\nXGROUP DELCONSUMER key group consumer\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XGROUP DESTROY" {:fn-name "xgroup-destroy", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group], :req-args-fixed ["XGROUP" "DESTROY" key group], :fn-docstring "Destroys a consumer group..\n\nXGROUP DESTROY key group\n\nAvailable since: 5.0.0.\n\nTime complexity: O(N) where N is the number of entries in the group's pending entries list (PEL)."}
"XGROUP HELP" {:fn-name "xgroup-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["XGROUP" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nXGROUP HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XGROUP SETID" {:fn-name "xgroup-setid", :cluster-key-idx 2, :fn-params-more [key group arg1 & args], :fn-params-fixed [key group arg1], :req-args-fixed ["XGROUP" "SETID" key group arg1], :fn-docstring "Sets the last-delivered ID of a consumer group..\n\nXGROUP SETID key group id-selector [entriesread]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XINFO" {:fn-name "xinfo", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["XINFO" arg1], :fn-docstring "A container for stream introspection commands..\n\nXINFO \n\nAvailable since: 5.0.0.\n\nTime complexity: Depends on subcommand."}
"XINFO CONSUMERS" {:fn-name "xinfo-consumers", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group], :req-args-fixed ["XINFO" "CONSUMERS" key group], :fn-docstring "Returns a list of the consumers in a consumer group..\n\nXINFO CONSUMERS key group\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XINFO GROUPS" {:fn-name "xinfo-groups", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["XINFO" "GROUPS" key], :fn-docstring "Returns a list of the consumer groups of a stream..\n\nXINFO GROUPS key\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XINFO HELP" {:fn-name "xinfo-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["XINFO" "HELP"], :fn-docstring "Returns helpful text about the different subcommands..\n\nXINFO HELP \n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XINFO STREAM" {:fn-name "xinfo-stream", :cluster-key-idx 2, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["XINFO" "STREAM" key], :fn-docstring "Returns information about a stream..\n\nXINFO STREAM key [full-block]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XLEN" {:fn-name "xlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["XLEN" key], :fn-docstring "Return the number of messages in a stream..\n\nXLEN key\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XPENDING" {:fn-name "xpending", :cluster-key-idx 1, :fn-params-more [key group & args], :fn-params-fixed [key group], :req-args-fixed ["XPENDING" key group], :fn-docstring "Returns the information and entries from a stream consumer group's pending entries list..\n\nXPENDING key group [filters]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer."}
"XRANGE" {:fn-name "xrange", :cluster-key-idx 1, :fn-params-more [key start end & args], :fn-params-fixed [key start end], :req-args-fixed ["XRANGE" key start end], :fn-docstring "Returns the messages from a stream within a range of IDs..\n\nXRANGE key start end [count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1)."}
"XREAD" {:fn-name "xread", :cluster-key-idx 1, :fn-params-more [arg1 arg2 arg3 & args], :fn-params-fixed [arg1 arg2 arg3], :req-args-fixed ["XREAD" arg1 arg2 arg3], :fn-docstring "Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise..\n\nXREAD [count] [milliseconds] streams\n\nAvailable since: 5.0.0.\n\n"}
"XREADGROUP" {:fn-name "xreadgroup", :cluster-key-idx 1, :fn-params-more [arg1 arg2 arg3 arg4 arg5 arg6 & args], :fn-params-fixed [arg1 arg2 arg3 arg4 arg5 arg6], :req-args-fixed ["XREADGROUP" arg1 arg2 arg3 arg4 arg5 arg6], :fn-docstring "Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise..\n\nXREADGROUP group-block [count] [milliseconds] [noack] streams\n\nAvailable since: 5.0.0.\n\nTime complexity: For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data."}
"XREVRANGE" {:fn-name "xrevrange", :cluster-key-idx 1, :fn-params-more [key end start & args], :fn-params-fixed [key end start], :req-args-fixed ["XREVRANGE" key end start], :fn-docstring "Returns the messages from a stream within a range of IDs in reverse order..\n\nXREVRANGE key end start [count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1)."}
"XSETID" {:fn-name "xsetid", :cluster-key-idx 1, :fn-params-more [key last-id & args], :fn-params-fixed [key last-id], :req-args-fixed ["XSETID" key last-id], :fn-docstring "An internal command for replicating stream values..\n\nXSETID key last-id [entries-added] [max-deleted-id]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)"}
"XTRIM" {:fn-name "xtrim", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["XTRIM" key arg1 arg2], :fn-docstring "Deletes messages from the beginning of a stream..\n\nXTRIM key trim\n\nAvailable since: 5.0.0.\n\nTime complexity: O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation."}
"ZADD" {:fn-name "zadd", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["ZADD" key arg1 arg2], :fn-docstring "Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist..\n\nZADD key [condition] [comparison] [change] [increment] data [data ...]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set."}
"ZCARD" {:fn-name "zcard", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["ZCARD" key], :fn-docstring "Returns the number of members in a sorted set..\n\nZCARD key\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)"}
"ZCOUNT" {:fn-name "zcount", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZCOUNT" key min max], :fn-docstring "Returns the count of members in a sorted set that have scores within a range..\n\nZCOUNT key min max\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set."}
"ZDIFF" {:fn-name "zdiff", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZDIFF" numkeys key], :fn-docstring "Returns the difference between multiple sorted sets..\n\nZDIFF numkeys key [key ...] [withscores]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set."}
"ZDIFFSTORE" {:fn-name "zdiffstore", :cluster-key-idx 1, :fn-params-more [destination numkeys key & args], :fn-params-fixed [destination numkeys key], :req-args-fixed ["ZDIFFSTORE" destination numkeys key], :fn-docstring "Stores the difference of multiple sorted sets in a key..\n\nZDIFFSTORE destination numkeys key [key ...]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set."}
"ZINCRBY" {:fn-name "zincrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key increment member], :req-args-fixed ["ZINCRBY" key increment member], :fn-docstring "Increments the score of a member in a sorted set..\n\nZINCRBY key increment member\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)) where N is the number of elements in the sorted set."}
"ZINTER" {:fn-name "zinter", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZINTER" numkeys key], :fn-docstring "Returns the intersect of multiple sorted sets..\n\nZINTER numkeys key [key ...] [weight [weight ...]] [aggregate] [withscores]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set."}
"ZINTERCARD" {:fn-name "zintercard", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZINTERCARD" numkeys key], :fn-docstring "Returns the number of members of the intersect of multiple sorted sets..\n\nZINTERCARD numkeys key [key ...] [limit]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets."}
"ZINTERSTORE" {:fn-name "zinterstore", :cluster-key-idx 1, :fn-params-more [destination numkeys key & args], :fn-params-fixed [destination numkeys key], :req-args-fixed ["ZINTERSTORE" destination numkeys key], :fn-docstring "Stores the intersect of multiple sorted sets in a key..\n\nZINTERSTORE destination numkeys key [key ...] [weight [weight ...]] [aggregate]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set."}
"ZLEXCOUNT" {:fn-name "zlexcount", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZLEXCOUNT" key min max], :fn-docstring "Returns the number of members in a sorted set within a lexicographical range..\n\nZLEXCOUNT key min max\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set."}
"ZMPOP" {:fn-name "zmpop", :cluster-key-idx 1, :fn-params-more [numkeys key arg1 & args], :fn-params-fixed [numkeys key arg1], :req-args-fixed ["ZMPOP" numkeys key arg1], :fn-docstring "Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped..\n\nZMPOP numkeys key [key ...] where [count]\n\nAvailable since: 7.0.0.\n\nTime complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped."}
"ZMSCORE" {:fn-name "zmscore", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZMSCORE" key member], :fn-docstring "Returns the score of one or more members in a sorted set..\n\nZMSCORE key member [member ...]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N) where N is the number of members being requested."}
"ZPOPMAX" {:fn-name "zpopmax", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["ZPOPMAX" key], :fn-docstring "Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped..\n\nZPOPMAX key [count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped."}
"ZPOPMIN" {:fn-name "zpopmin", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["ZPOPMIN" key], :fn-docstring "Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped..\n\nZPOPMIN key [count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped."}
"ZRANDMEMBER" {:fn-name "zrandmember", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["ZRANDMEMBER" key], :fn-docstring "Returns one or more random members from a sorted set..\n\nZRANDMEMBER key [options]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N) where N is the number of members returned"}
"ZRANGE" {:fn-name "zrange", :cluster-key-idx 1, :fn-params-more [key start stop & args], :fn-params-fixed [key start stop], :req-args-fixed ["ZRANGE" key start stop], :fn-docstring "Returns members in a sorted set within a range of indexes..\n\nZRANGE key start stop [sortby] [rev] [limit] [withscores]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned."}
"ZRANGEBYLEX" {:fn-name "zrangebylex", :cluster-key-idx 1, :fn-params-more [key min max & args], :fn-params-fixed [key min max], :req-args-fixed ["ZRANGEBYLEX" key min max], :fn-docstring "Returns members in a sorted set within a lexicographical range..\n\nZRANGEBYLEX key min max [limit]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N))."}
"ZRANGEBYSCORE" {:fn-name "zrangebyscore", :cluster-key-idx 1, :fn-params-more [key min max & args], :fn-params-fixed [key min max], :req-args-fixed ["ZRANGEBYSCORE" key min max], :fn-docstring "Returns members in a sorted set within a range of scores..\n\nZRANGEBYSCORE key min max [withscores] [limit]\n\nAvailable since: 1.0.5.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N))."}
"ZRANGESTORE" {:fn-name "zrangestore", :cluster-key-idx 1, :fn-params-more [dst src min max & args], :fn-params-fixed [dst src min max], :req-args-fixed ["ZRANGESTORE" dst src min max], :fn-docstring "Stores a range of members from sorted set in a key..\n\nZRANGESTORE dst src min max [sortby] [rev] [limit]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key."}
"ZRANK" {:fn-name "zrank", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZRANK" key member], :fn-docstring "Returns the index of a member in a sorted set ordered by ascending scores..\n\nZRANK key member [withscore]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N))"}
"ZREM" {:fn-name "zrem", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZREM" key member], :fn-docstring "Removes one or more members from a sorted set. Deletes the sorted set if all members were removed..\n\nZREM key member [member ...]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed."}
"ZREMRANGEBYLEX" {:fn-name "zremrangebylex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZREMRANGEBYLEX" key min max], :fn-docstring "Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed..\n\nZREMRANGEBYLEX key min max\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation."}
"ZREMRANGEBYRANK" {:fn-name "zremrangebyrank", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start stop], :req-args-fixed ["ZREMRANGEBYRANK" key start stop], :fn-docstring "Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed..\n\nZREMRANGEBYRANK key start stop\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation."}
"ZREMRANGEBYSCORE" {:fn-name "zremrangebyscore", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZREMRANGEBYSCORE" key min max], :fn-docstring "Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed..\n\nZREMRANGEBYSCORE key min max\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation."}
"ZREVRANGE" {:fn-name "zrevrange", :cluster-key-idx 1, :fn-params-more [key start stop & args], :fn-params-fixed [key start stop], :req-args-fixed ["ZREVRANGE" key start stop], :fn-docstring "Returns members in a sorted set within a range of indexes in reverse order..\n\nZREVRANGE key start stop [withscores]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned."}
"ZREVRANGEBYLEX" {:fn-name "zrevrangebylex", :cluster-key-idx 1, :fn-params-more [key max min & args], :fn-params-fixed [key max min], :req-args-fixed ["ZREVRANGEBYLEX" key max min], :fn-docstring "Returns members in a sorted set within a lexicographical range in reverse order..\n\nZREVRANGEBYLEX key max min [limit]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N))."}
"ZREVRANGEBYSCORE" {:fn-name "zrevrangebyscore", :cluster-key-idx 1, :fn-params-more [key max min & args], :fn-params-fixed [key max min], :req-args-fixed ["ZREVRANGEBYSCORE" key max min], :fn-docstring "Returns members in a sorted set within a range of scores in reverse order..\n\nZREVRANGEBYSCORE key max min [withscores] [limit]\n\nAvailable since: 2.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N))."}
"ZREVRANK" {:fn-name "zrevrank", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZREVRANK" key member], :fn-docstring "Returns the index of a member in a sorted set ordered by descending scores..\n\nZREVRANK key member [withscore]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N))"}
"ZSCAN" {:fn-name "zscan", :cluster-key-idx 1, :fn-params-more [key cursor & args], :fn-params-fixed [key cursor], :req-args-fixed ["ZSCAN" key cursor], :fn-docstring "Iterates over members and scores of a sorted set..\n\nZSCAN key cursor [pattern] [count]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection."}
"ZSCORE" {:fn-name "zscore", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key member], :req-args-fixed ["ZSCORE" key member], :fn-docstring "Returns the score of a member in a sorted set..\n\nZSCORE key member\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)"}
"ZUNION" {:fn-name "zunion", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZUNION" numkeys key], :fn-docstring "Returns the union of multiple sorted sets..\n\nZUNION numkeys key [key ...] [weight [weight ...]] [aggregate] [withscores]\n\nAvailable since: 6.2.0.\n\nTime complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set."}
"ZUNIONSTORE" {:fn-name "zunionstore", :cluster-key-idx 1, :fn-params-more [destination numkeys key & args], :fn-params-fixed [destination numkeys key], :req-args-fixed ["ZUNIONSTORE" destination numkeys key], :fn-docstring "Stores the union of multiple sorted sets in a key..\n\nZUNIONSTORE destination numkeys key [key ...] [weight [weight ...]] [aggregate]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set."}
}