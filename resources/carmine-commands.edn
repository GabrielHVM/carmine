{
"ACL" {:fn-name "acl", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["ACL" arg1], :fn-docstring "`ACL` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: Depends on subcommand.\n\nA container for Access List Control commands.\nRef. https://redis.io/commands/acl/ for more info."}
"ACL CAT" {:fn-name "acl-cat", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["ACL" "CAT"], :fn-docstring "`ACL CAT` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1) since the categories and commands are a fixed set.\n\nLists the ACL categories, or the commands inside a category.\nRef. https://redis.io/commands/acl-cat/ for more info."}
"ACL DELUSER" {:fn-name "acl-deluser", :cluster-key-idx 2, :fn-params-more [username & args], :fn-params-fixed [username], :req-args-fixed ["ACL" "DELUSER" username], :fn-docstring "`ACL DELUSER` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1) amortized time considering the typical user.\n\nDeletes ACL users, and terminates their connections.\nRef. https://redis.io/commands/acl-deluser/ for more info."}
"ACL DRYRUN" {:fn-name "acl-dryrun", :cluster-key-idx 2, :fn-params-more [username command & args], :fn-params-fixed [username command], :req-args-fixed ["ACL" "DRYRUN" username command], :fn-docstring "`ACL DRYRUN` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1).\n\nSimulates the execution of a command by a user, without executing the command.\nRef. https://redis.io/commands/acl-dryrun/ for more info."}
"ACL GENPASS" {:fn-name "acl-genpass", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["ACL" "GENPASS"], :fn-docstring "`ACL GENPASS` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1)\n\nGenerates a pseudorandom, secure password that can be used to identify ACL users.\nRef. https://redis.io/commands/acl-genpass/ for more info."}
"ACL GETUSER" {:fn-name "acl-getuser", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [username], :req-args-fixed ["ACL" "GETUSER" username], :fn-docstring "`ACL GETUSER` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(N). Where N is the number of password, command and pattern rules that the user has.\n\nLists the ACL rules of a user.\nRef. https://redis.io/commands/acl-getuser/ for more info."}
"ACL HELP" {:fn-name "acl-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "HELP"], :fn-docstring "`ACL HELP` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/acl-help/ for more info."}
"ACL LIST" {:fn-name "acl-list", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "LIST"], :fn-docstring "`ACL LIST` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(N). Where N is the number of configured users.\n\nDumps the effective rules in ACL file format.\nRef. https://redis.io/commands/acl-list/ for more info."}
"ACL LOAD" {:fn-name "acl-load", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "LOAD"], :fn-docstring "`ACL LOAD` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(N). Where N is the number of configured users.\n\nReloads the rules from the configured ACL file.\nRef. https://redis.io/commands/acl-load/ for more info."}
"ACL LOG" {:fn-name "acl-log", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["ACL" "LOG"], :fn-docstring "`ACL LOG` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(N) with N being the number of entries shown.\n\nLists recent security events generated due to ACL rules.\nRef. https://redis.io/commands/acl-log/ for more info."}
"ACL SAVE" {:fn-name "acl-save", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "SAVE"], :fn-docstring "`ACL SAVE` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(N). Where N is the number of configured users.\n\nSaves the effective ACL rules in the configured ACL file.\nRef. https://redis.io/commands/acl-save/ for more info."}
"ACL SETUSER" {:fn-name "acl-setuser", :cluster-key-idx 2, :fn-params-more [username & args], :fn-params-fixed [username], :req-args-fixed ["ACL" "SETUSER" username], :fn-docstring "`ACL SETUSER` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(N). Where N is the number of rules provided.\n\nCreates and modifies an ACL user and its rules.\nRef. https://redis.io/commands/acl-setuser/ for more info."}
"ACL USERS" {:fn-name "acl-users", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "USERS"], :fn-docstring "`ACL USERS` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(N). Where N is the number of configured users.\n\nLists all ACL users.\nRef. https://redis.io/commands/acl-users/ for more info."}
"ACL WHOAMI" {:fn-name "acl-whoami", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ACL" "WHOAMI"], :fn-docstring "`ACL WHOAMI` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1)\n\nReturns the authenticated username of the current connection.\nRef. https://redis.io/commands/acl-whoami/ for more info."}
"APPEND" {:fn-name "append", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key value], :req-args-fixed ["APPEND" key value], :fn-docstring "`APPEND` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.\n\nAppends a string to the value of a key. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/append/ for more info."}
"ASKING" {:fn-name "asking", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ASKING"], :fn-docstring "`ASKING` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nSignals that a cluster client is following an -ASK redirect.\nRef. https://redis.io/commands/asking/ for more info."}
"AUTH" {:fn-name "auth", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["AUTH" arg1], :fn-docstring "`AUTH` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of passwords defined for the user\n\nAuthenticates the connection.\nRef. https://redis.io/commands/auth/ for more info."}
"BGREWRITEAOF" {:fn-name "bgrewriteaof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["BGREWRITEAOF"], :fn-docstring "`BGREWRITEAOF` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nAsynchronously rewrites the append-only file to disk.\nRef. https://redis.io/commands/bgrewriteaof/ for more info."}
"BGSAVE" {:fn-name "bgsave", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["BGSAVE"], :fn-docstring "`BGSAVE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nAsynchronously saves the database(s) to disk.\nRef. https://redis.io/commands/bgsave/ for more info."}
"BITCOUNT" {:fn-name "bitcount", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["BITCOUNT" key], :fn-docstring "`BITCOUNT` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(N)\n\nCounts the number of set bits (population counting) in a string.\nRef. https://redis.io/commands/bitcount/ for more info."}
"BITFIELD" {:fn-name "bitfield", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["BITFIELD" key], :fn-docstring "`BITFIELD` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(1) for each subcommand specified\n\nPerforms arbitrary bitfield integer operations on strings.\nRef. https://redis.io/commands/bitfield/ for more info."}
"BITFIELD_RO" {:fn-name "bitfield_ro", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["BITFIELD_RO" key], :fn-docstring "`BITFIELD_RO` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1) for each subcommand specified\n\nPerforms arbitrary read-only bitfield integer operations on strings.\nRef. https://redis.io/commands/bitfield_ro/ for more info."}
"BITOP" {:fn-name "bitop", :cluster-key-idx 1, :fn-params-more [arg1 arg2 arg3 & args], :fn-params-fixed [arg1 arg2 arg3], :req-args-fixed ["BITOP" arg1 arg2 arg3], :fn-docstring "`BITOP` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(N)\n\nPerforms bitwise operations on multiple strings, and stores the result.\nRef. https://redis.io/commands/bitop/ for more info."}
"BITPOS" {:fn-name "bitpos", :cluster-key-idx 1, :fn-params-more [key bit & args], :fn-params-fixed [key bit], :req-args-fixed ["BITPOS" key bit], :fn-docstring "`BITPOS` - Redis command function.\n  Available since: Redis 2.8.7\n       Complexity: O(N)\n\nFinds the first set (1) or clear (0) bit in a string.\nRef. https://redis.io/commands/bitpos/ for more info."}
"BLMOVE" {:fn-name "blmove", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination arg1 arg2 arg3], :req-args-fixed ["BLMOVE" source destination arg1 arg2 arg3], :fn-docstring "`BLMOVE` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nPops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.\nRef. https://redis.io/commands/blmove/ for more info."}
"BLMPOP" {:fn-name "blmpop", :cluster-key-idx 1, :fn-params-more [timeout numkeys key arg1 & args], :fn-params-fixed [timeout numkeys key arg1], :req-args-fixed ["BLMPOP" timeout numkeys key arg1], :fn-docstring "`BLMPOP` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned.\n\nPops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/blmpop/ for more info."}
"BLPOP" {:fn-name "blpop", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BLPOP" key arg1], :fn-docstring "`BLPOP` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of provided keys.\n\nRemoves and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/blpop/ for more info."}
"BRPOP" {:fn-name "brpop", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BRPOP" key arg1], :fn-docstring "`BRPOP` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of provided keys.\n\nRemoves and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/brpop/ for more info."}
"BRPOPLPUSH" {:fn-name "brpoplpush", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination timeout], :req-args-fixed ["BRPOPLPUSH" source destination timeout], :fn-docstring "`BRPOPLPUSH` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1)\n\nPops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/brpoplpush/ for more info."}
"BZMPOP" {:fn-name "bzmpop", :cluster-key-idx 1, :fn-params-more [timeout numkeys key arg1 & args], :fn-params-fixed [timeout numkeys key arg1], :req-args-fixed ["BZMPOP" timeout numkeys key arg1], :fn-docstring "`BZMPOP` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.\n\nRemoves and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.\nRef. https://redis.io/commands/bzmpop/ for more info."}
"BZPOPMAX" {:fn-name "bzpopmax", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BZPOPMAX" key arg1], :fn-docstring "`BZPOPMAX` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(log(N)) with N being the number of elements in the sorted set.\n\nRemoves and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.\nRef. https://redis.io/commands/bzpopmax/ for more info."}
"BZPOPMIN" {:fn-name "bzpopmin", :cluster-key-idx 1, :fn-params-more [key arg1 & args], :fn-params-fixed [key arg1], :req-args-fixed ["BZPOPMIN" key arg1], :fn-docstring "`BZPOPMIN` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(log(N)) with N being the number of elements in the sorted set.\n\nRemoves and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.\nRef. https://redis.io/commands/bzpopmin/ for more info."}
"CLIENT" {:fn-name "client", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" arg1], :fn-docstring "`CLIENT` - Redis command function.\n  Available since: Redis 2.4.0\n       Complexity: Depends on subcommand.\n\nA container for client connection commands.\nRef. https://redis.io/commands/client/ for more info."}
"CLIENT CACHING" {:fn-name "client-caching", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "CACHING" arg1], :fn-docstring "`CLIENT CACHING` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1)\n\nInstructs the server whether to track the keys in the next request.\nRef. https://redis.io/commands/client-caching/ for more info."}
"CLIENT GETNAME" {:fn-name "client-getname", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "GETNAME"], :fn-docstring "`CLIENT GETNAME` - Redis command function.\n  Available since: Redis 2.6.9\n       Complexity: O(1)\n\nReturns the name of the connection.\nRef. https://redis.io/commands/client-getname/ for more info."}
"CLIENT GETREDIR" {:fn-name "client-getredir", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "GETREDIR"], :fn-docstring "`CLIENT GETREDIR` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1)\n\nReturns the client ID to which the connection's tracking notifications are redirected.\nRef. https://redis.io/commands/client-getredir/ for more info."}
"CLIENT HELP" {:fn-name "client-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "HELP"], :fn-docstring "`CLIENT HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/client-help/ for more info."}
"CLIENT ID" {:fn-name "client-id", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "ID"], :fn-docstring "`CLIENT ID` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns the unique client ID of the connection.\nRef. https://redis.io/commands/client-id/ for more info."}
"CLIENT INFO" {:fn-name "client-info", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "INFO"], :fn-docstring "`CLIENT INFO` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nReturns information about the connection.\nRef. https://redis.io/commands/client-info/ for more info."}
"CLIENT KILL" {:fn-name "client-kill", :cluster-key-idx 2, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "KILL" arg1], :fn-docstring "`CLIENT KILL` - Redis command function.\n  Available since: Redis 2.4.0\n       Complexity: O(N) where N is the number of client connections\n\nTerminates open connections.\nRef. https://redis.io/commands/client-kill/ for more info."}
"CLIENT LIST" {:fn-name "client-list", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["CLIENT" "LIST"], :fn-docstring "`CLIENT LIST` - Redis command function.\n  Available since: Redis 2.4.0\n       Complexity: O(N) where N is the number of client connections\n\nLists open connections.\nRef. https://redis.io/commands/client-list/ for more info."}
"CLIENT NO-EVICT" {:fn-name "client-no-evict", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "NO-EVICT" arg1], :fn-docstring "`CLIENT NO-EVICT` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nSets the client eviction mode of the connection.\nRef. https://redis.io/commands/client-no-evict/ for more info."}
"CLIENT NO-TOUCH" {:fn-name "client-no-touch", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "NO-TOUCH" arg1], :fn-docstring "`CLIENT NO-TOUCH` - Redis command function.\n  Available since: Redis 7.2.0\n       Complexity: O(1)\n\nControls whether commands sent by the client affect the LRU/LFU of accessed keys.\nRef. https://redis.io/commands/client-no-touch/ for more info."}
"CLIENT PAUSE" {:fn-name "client-pause", :cluster-key-idx 2, :fn-params-more [timeout & args], :fn-params-fixed [timeout], :req-args-fixed ["CLIENT" "PAUSE" timeout], :fn-docstring "`CLIENT PAUSE` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nSuspends commands processing.\nRef. https://redis.io/commands/client-pause/ for more info."}
"CLIENT REPLY" {:fn-name "client-reply", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "REPLY" arg1], :fn-docstring "`CLIENT REPLY` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(1)\n\nInstructs the server whether to reply to commands.\nRef. https://redis.io/commands/client-reply/ for more info."}
"CLIENT SETINFO" {:fn-name "client-setinfo", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1 arg2], :req-args-fixed ["CLIENT" "SETINFO" arg1 arg2], :fn-docstring "`CLIENT SETINFO` - Redis command function.\n  Available since: Redis 7.2.0\n       Complexity: O(1)\n\nSets information specific to the client or connection.\nRef. https://redis.io/commands/client-setinfo/ for more info."}
"CLIENT SETNAME" {:fn-name "client-setname", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [connection-name], :req-args-fixed ["CLIENT" "SETNAME" connection-name], :fn-docstring "`CLIENT SETNAME` - Redis command function.\n  Available since: Redis 2.6.9\n       Complexity: O(1)\n\nSets the connection name.\nRef. https://redis.io/commands/client-setname/ for more info."}
"CLIENT TRACKING" {:fn-name "client-tracking", :cluster-key-idx 2, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLIENT" "TRACKING" arg1], :fn-docstring "`CLIENT TRACKING` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1). Some options may introduce additional complexity.\n\nControls server-assisted client-side caching for the connection.\nRef. https://redis.io/commands/client-tracking/ for more info."}
"CLIENT TRACKINGINFO" {:fn-name "client-trackinginfo", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "TRACKINGINFO"], :fn-docstring "`CLIENT TRACKINGINFO` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nReturns information about server-assisted client-side caching for the connection.\nRef. https://redis.io/commands/client-trackinginfo/ for more info."}
"CLIENT UNBLOCK" {:fn-name "client-unblock", :cluster-key-idx 2, :fn-params-more [client-id & args], :fn-params-fixed [client-id], :req-args-fixed ["CLIENT" "UNBLOCK" client-id], :fn-docstring "`CLIENT UNBLOCK` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(log N) where N is the number of client connections\n\nUnblocks a client blocked by a blocking command from a different connection.\nRef. https://redis.io/commands/client-unblock/ for more info."}
"CLIENT UNPAUSE" {:fn-name "client-unpause", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLIENT" "UNPAUSE"], :fn-docstring "`CLIENT UNPAUSE` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N) Where N is the number of paused clients\n\nResumes processing commands from paused clients.\nRef. https://redis.io/commands/client-unpause/ for more info."}
"CLUSTER" {:fn-name "cluster", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CLUSTER" arg1], :fn-docstring "`CLUSTER` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: Depends on subcommand.\n\nA container for Redis Cluster commands.\nRef. https://redis.io/commands/cluster/ for more info."}
"CLUSTER ADDSLOTS" {:fn-name "cluster-addslots", :cluster-key-idx 2, :fn-params-more [slot & args], :fn-params-fixed [slot], :req-args-fixed ["CLUSTER" "ADDSLOTS" slot], :fn-docstring "`CLUSTER ADDSLOTS` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the total number of hash slot arguments\n\nAssigns new hash slots to a node.\nRef. https://redis.io/commands/cluster-addslots/ for more info."}
"CLUSTER ADDSLOTSRANGE" {:fn-name "cluster-addslotsrange", :cluster-key-idx 2, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["CLUSTER" "ADDSLOTSRANGE" arg1 arg2], :fn-docstring "`CLUSTER ADDSLOTSRANGE` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.\n\nAssigns new hash slot ranges to a node.\nRef. https://redis.io/commands/cluster-addslotsrange/ for more info."}
"CLUSTER BUMPEPOCH" {:fn-name "cluster-bumpepoch", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "BUMPEPOCH"], :fn-docstring "`CLUSTER BUMPEPOCH` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nAdvances the cluster config epoch.\nRef. https://redis.io/commands/cluster-bumpepoch/ for more info."}
"CLUSTER COUNT-FAILURE-REPORTS" {:fn-name "cluster-count-failure-reports", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "COUNT-FAILURE-REPORTS" node-id], :fn-docstring "`CLUSTER COUNT-FAILURE-REPORTS` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the number of failure reports\n\nReturns the number of active failure reports active for a node.\nRef. https://redis.io/commands/cluster-count-failure-reports/ for more info."}
"CLUSTER COUNTKEYSINSLOT" {:fn-name "cluster-countkeysinslot", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [slot], :req-args-fixed ["CLUSTER" "COUNTKEYSINSLOT" slot], :fn-docstring "`CLUSTER COUNTKEYSINSLOT` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nReturns the number of keys in a hash slot.\nRef. https://redis.io/commands/cluster-countkeysinslot/ for more info."}
"CLUSTER DELSLOTS" {:fn-name "cluster-delslots", :cluster-key-idx 2, :fn-params-more [slot & args], :fn-params-fixed [slot], :req-args-fixed ["CLUSTER" "DELSLOTS" slot], :fn-docstring "`CLUSTER DELSLOTS` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the total number of hash slot arguments\n\nSets hash slots as unbound for a node.\nRef. https://redis.io/commands/cluster-delslots/ for more info."}
"CLUSTER DELSLOTSRANGE" {:fn-name "cluster-delslotsrange", :cluster-key-idx 2, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["CLUSTER" "DELSLOTSRANGE" arg1 arg2], :fn-docstring "`CLUSTER DELSLOTSRANGE` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.\n\nSets hash slot ranges as unbound for a node.\nRef. https://redis.io/commands/cluster-delslotsrange/ for more info."}
"CLUSTER FAILOVER" {:fn-name "cluster-failover", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["CLUSTER" "FAILOVER"], :fn-docstring "`CLUSTER FAILOVER` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nForces a replica to perform a manual failover of its master.\nRef. https://redis.io/commands/cluster-failover/ for more info."}
"CLUSTER FLUSHSLOTS" {:fn-name "cluster-flushslots", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "FLUSHSLOTS"], :fn-docstring "`CLUSTER FLUSHSLOTS` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nDeletes all slots information from a node.\nRef. https://redis.io/commands/cluster-flushslots/ for more info."}
"CLUSTER FORGET" {:fn-name "cluster-forget", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "FORGET" node-id], :fn-docstring "`CLUSTER FORGET` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nRemoves a node from the nodes table.\nRef. https://redis.io/commands/cluster-forget/ for more info."}
"CLUSTER GETKEYSINSLOT" {:fn-name "cluster-getkeysinslot", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [slot count], :req-args-fixed ["CLUSTER" "GETKEYSINSLOT" slot count], :fn-docstring "`CLUSTER GETKEYSINSLOT` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the number of requested keys\n\nReturns the key names in a hash slot.\nRef. https://redis.io/commands/cluster-getkeysinslot/ for more info."}
"CLUSTER HELP" {:fn-name "cluster-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "HELP"], :fn-docstring "`CLUSTER HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/cluster-help/ for more info."}
"CLUSTER INFO" {:fn-name "cluster-info", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "INFO"], :fn-docstring "`CLUSTER INFO` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nReturns information about the state of a node.\nRef. https://redis.io/commands/cluster-info/ for more info."}
"CLUSTER KEYSLOT" {:fn-name "cluster-keyslot", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["CLUSTER" "KEYSLOT" key], :fn-docstring "`CLUSTER KEYSLOT` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the number of bytes in the key\n\nReturns the hash slot for a key.\nRef. https://redis.io/commands/cluster-keyslot/ for more info."}
"CLUSTER LINKS" {:fn-name "cluster-links", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "LINKS"], :fn-docstring "`CLUSTER LINKS` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the total number of Cluster nodes\n\nReturns a list of all TCP links to and from peer nodes.\nRef. https://redis.io/commands/cluster-links/ for more info."}
"CLUSTER MEET" {:fn-name "cluster-meet", :cluster-key-idx 2, :fn-params-more [ip port & args], :fn-params-fixed [ip port], :req-args-fixed ["CLUSTER" "MEET" ip port], :fn-docstring "`CLUSTER MEET` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nForces a node to handshake with another node.\nRef. https://redis.io/commands/cluster-meet/ for more info."}
"CLUSTER MYID" {:fn-name "cluster-myid", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "MYID"], :fn-docstring "`CLUSTER MYID` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nReturns the ID of a node.\nRef. https://redis.io/commands/cluster-myid/ for more info."}
"CLUSTER MYSHARDID" {:fn-name "cluster-myshardid", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "MYSHARDID"], :fn-docstring "`CLUSTER MYSHARDID` - Redis command function.\n  Available since: Redis 7.2.0\n       Complexity: O(1)\n\nReturns the shard ID of a node.\nRef. https://redis.io/commands/cluster-myshardid/ for more info."}
"CLUSTER NODES" {:fn-name "cluster-nodes", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "NODES"], :fn-docstring "`CLUSTER NODES` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the total number of Cluster nodes\n\nReturns the cluster configuration for a node.\nRef. https://redis.io/commands/cluster-nodes/ for more info."}
"CLUSTER REPLICAS" {:fn-name "cluster-replicas", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "REPLICAS" node-id], :fn-docstring "`CLUSTER REPLICAS` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nLists the replica nodes of a master node.\nRef. https://redis.io/commands/cluster-replicas/ for more info."}
"CLUSTER REPLICATE" {:fn-name "cluster-replicate", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "REPLICATE" node-id], :fn-docstring "`CLUSTER REPLICATE` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nConfigure a node as replica of a master node.\nRef. https://redis.io/commands/cluster-replicate/ for more info."}
"CLUSTER RESET" {:fn-name "cluster-reset", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["CLUSTER" "RESET"], :fn-docstring "`CLUSTER RESET` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.\n\nResets a node.\nRef. https://redis.io/commands/cluster-reset/ for more info."}
"CLUSTER SAVECONFIG" {:fn-name "cluster-saveconfig", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "SAVECONFIG"], :fn-docstring "`CLUSTER SAVECONFIG` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nForces a node to save the cluster configuration to disk.\nRef. https://redis.io/commands/cluster-saveconfig/ for more info."}
"CLUSTER SET-CONFIG-EPOCH" {:fn-name "cluster-set-config-epoch", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [config-epoch], :req-args-fixed ["CLUSTER" "SET-CONFIG-EPOCH" config-epoch], :fn-docstring "`CLUSTER SET-CONFIG-EPOCH` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nSets the configuration epoch for a new node.\nRef. https://redis.io/commands/cluster-set-config-epoch/ for more info."}
"CLUSTER SETSLOT" {:fn-name "cluster-setslot", :cluster-key-idx 2, :fn-params-more [slot arg1 & args], :fn-params-fixed [slot arg1], :req-args-fixed ["CLUSTER" "SETSLOT" slot arg1], :fn-docstring "`CLUSTER SETSLOT` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nBinds a hash slot to a node.\nRef. https://redis.io/commands/cluster-setslot/ for more info."}
"CLUSTER SHARDS" {:fn-name "cluster-shards", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "SHARDS"], :fn-docstring "`CLUSTER SHARDS` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the total number of cluster nodes\n\nReturns the mapping of cluster slots to shards.\nRef. https://redis.io/commands/cluster-shards/ for more info."}
"CLUSTER SLAVES" {:fn-name "cluster-slaves", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [node-id], :req-args-fixed ["CLUSTER" "SLAVES" node-id], :fn-docstring "`CLUSTER SLAVES` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nLists the replica nodes of a master node.\nRef. https://redis.io/commands/cluster-slaves/ for more info."}
"CLUSTER SLOTS" {:fn-name "cluster-slots", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CLUSTER" "SLOTS"], :fn-docstring "`CLUSTER SLOTS` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(N) where N is the total number of Cluster nodes\n\nReturns the mapping of cluster slots to nodes.\nRef. https://redis.io/commands/cluster-slots/ for more info."}
"COMMAND" {:fn-name "command", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND"], :fn-docstring "`COMMAND` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(N) where N is the total number of Redis commands\n\nReturns detailed information about all commands.\nRef. https://redis.io/commands/command/ for more info."}
"COMMAND COUNT" {:fn-name "command-count", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["COMMAND" "COUNT"], :fn-docstring "`COMMAND COUNT` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(1)\n\nReturns a count of commands.\nRef. https://redis.io/commands/command-count/ for more info."}
"COMMAND DOCS" {:fn-name "command-docs", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND" "DOCS"], :fn-docstring "`COMMAND DOCS` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of commands to look up\n\nReturns documentary information about one, multiple or all commands.\nRef. https://redis.io/commands/command-docs/ for more info."}
"COMMAND GETKEYS" {:fn-name "command-getkeys", :cluster-key-idx 2, :fn-params-more [command & args], :fn-params-fixed [command], :req-args-fixed ["COMMAND" "GETKEYS" command], :fn-docstring "`COMMAND GETKEYS` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(N) where N is the number of arguments to the command\n\nExtracts the key names from an arbitrary command.\nRef. https://redis.io/commands/command-getkeys/ for more info."}
"COMMAND GETKEYSANDFLAGS" {:fn-name "command-getkeysandflags", :cluster-key-idx 2, :fn-params-more [command & args], :fn-params-fixed [command], :req-args-fixed ["COMMAND" "GETKEYSANDFLAGS" command], :fn-docstring "`COMMAND GETKEYSANDFLAGS` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of arguments to the command\n\nExtracts the key names and access flags for an arbitrary command.\nRef. https://redis.io/commands/command-getkeysandflags/ for more info."}
"COMMAND HELP" {:fn-name "command-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["COMMAND" "HELP"], :fn-docstring "`COMMAND HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/command-help/ for more info."}
"COMMAND INFO" {:fn-name "command-info", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND" "INFO"], :fn-docstring "`COMMAND INFO` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(N) where N is the number of commands to look up\n\nReturns information about one, multiple or all commands.\nRef. https://redis.io/commands/command-info/ for more info."}
"COMMAND LIST" {:fn-name "command-list", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["COMMAND" "LIST"], :fn-docstring "`COMMAND LIST` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the total number of Redis commands\n\nReturns a list of command names.\nRef. https://redis.io/commands/command-list/ for more info."}
"CONFIG" {:fn-name "config", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["CONFIG" arg1], :fn-docstring "`CONFIG` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: Depends on subcommand.\n\nA container for server configuration commands.\nRef. https://redis.io/commands/config/ for more info."}
"CONFIG GET" {:fn-name "config-get", :cluster-key-idx 2, :fn-params-more [parameter & args], :fn-params-fixed [parameter], :req-args-fixed ["CONFIG" "GET" parameter], :fn-docstring "`CONFIG GET` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) when N is the number of configuration parameters provided\n\nReturns the effective values of configuration parameters.\nRef. https://redis.io/commands/config-get/ for more info."}
"CONFIG HELP" {:fn-name "config-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CONFIG" "HELP"], :fn-docstring "`CONFIG HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/config-help/ for more info."}
"CONFIG RESETSTAT" {:fn-name "config-resetstat", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CONFIG" "RESETSTAT"], :fn-docstring "`CONFIG RESETSTAT` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1)\n\nResets the server's statistics.\nRef. https://redis.io/commands/config-resetstat/ for more info."}
"CONFIG REWRITE" {:fn-name "config-rewrite", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["CONFIG" "REWRITE"], :fn-docstring "`CONFIG REWRITE` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(1)\n\nPersists the effective configuration to file.\nRef. https://redis.io/commands/config-rewrite/ for more info."}
"CONFIG SET" {:fn-name "config-set", :cluster-key-idx 2, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["CONFIG" "SET" arg1 arg2], :fn-docstring "`CONFIG SET` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) when N is the number of configuration parameters provided\n\nSets configuration parameters in-flight.\nRef. https://redis.io/commands/config-set/ for more info."}
"COPY" {:fn-name "copy", :cluster-key-idx 1, :fn-params-more [source destination & args], :fn-params-fixed [source destination], :req-args-fixed ["COPY" source destination], :fn-docstring "`COPY` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N) worst case for collections, where N is the number of nested items. O(1) for string values.\n\nCopies the value of a key to a new key.\nRef. https://redis.io/commands/copy/ for more info."}
"DBSIZE" {:fn-name "dbsize", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["DBSIZE"], :fn-docstring "`DBSIZE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the number of keys in the database.\nRef. https://redis.io/commands/dbsize/ for more info."}
"DEBUG" {:fn-name "debug", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["DEBUG" arg1], :fn-docstring "`DEBUG` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: Depends on subcommand.\n\nA container for debugging commands.\nRef. https://redis.io/commands/debug/ for more info."}
"DECR" {:fn-name "decr", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["DECR" key], :fn-docstring "`DECR` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nDecrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.\nRef. https://redis.io/commands/decr/ for more info."}
"DECRBY" {:fn-name "decrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key decrement], :req-args-fixed ["DECRBY" key decrement], :fn-docstring "`DECRBY` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nDecrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.\nRef. https://redis.io/commands/decrby/ for more info."}
"DEL" {:fn-name "del", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["DEL" key], :fn-docstring "`DEL` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).\n\nDeletes one or more keys.\nRef. https://redis.io/commands/del/ for more info."}
"DISCARD" {:fn-name "discard", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["DISCARD"], :fn-docstring "`DISCARD` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N), when N is the number of queued commands\n\nDiscards a transaction.\nRef. https://redis.io/commands/discard/ for more info."}
"DUMP" {:fn-name "dump", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["DUMP" key], :fn-docstring "`DUMP` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).\n\nReturns a serialized representation of the value stored at a key.\nRef. https://redis.io/commands/dump/ for more info."}
"ECHO" {:fn-name "echo", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [message], :req-args-fixed ["ECHO" message], :fn-docstring "`ECHO` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the given string.\nRef. https://redis.io/commands/echo/ for more info."}
"EVAL" {:fn-name "eval", :cluster-key-idx 1, :fn-params-more [script numkeys & args], :fn-params-fixed [script numkeys], :req-args-fixed ["EVAL" script numkeys], :fn-docstring "`EVAL` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: Depends on the script that is executed.\n\nExecutes a server-side Lua script.\nRef. https://redis.io/commands/eval/ for more info."}
"EVALSHA" {:fn-name "evalsha", :cluster-key-idx 1, :fn-params-more [sha1 numkeys & args], :fn-params-fixed [sha1 numkeys], :req-args-fixed ["EVALSHA" sha1 numkeys], :fn-docstring "`EVALSHA` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: Depends on the script that is executed.\n\nExecutes a server-side Lua script by SHA1 digest.\nRef. https://redis.io/commands/evalsha/ for more info."}
"EVALSHA_RO" {:fn-name "evalsha_ro", :cluster-key-idx 1, :fn-params-more [sha1 numkeys & args], :fn-params-fixed [sha1 numkeys], :req-args-fixed ["EVALSHA_RO" sha1 numkeys], :fn-docstring "`EVALSHA_RO` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: Depends on the script that is executed.\n\nExecutes a read-only server-side Lua script by SHA1 digest.\nRef. https://redis.io/commands/evalsha_ro/ for more info."}
"EVAL_RO" {:fn-name "eval_ro", :cluster-key-idx 1, :fn-params-more [script numkeys & args], :fn-params-fixed [script numkeys], :req-args-fixed ["EVAL_RO" script numkeys], :fn-docstring "`EVAL_RO` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: Depends on the script that is executed.\n\nExecutes a read-only server-side Lua script.\nRef. https://redis.io/commands/eval_ro/ for more info."}
"EXEC" {:fn-name "exec", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["EXEC"], :fn-docstring "`EXEC` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: Depends on commands in the transaction\n\nExecutes all commands in a transaction.\nRef. https://redis.io/commands/exec/ for more info."}
"EXISTS" {:fn-name "exists", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["EXISTS" key], :fn-docstring "`EXISTS` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of keys to check.\n\nDetermines whether one or more keys exist.\nRef. https://redis.io/commands/exists/ for more info."}
"EXPIRE" {:fn-name "expire", :cluster-key-idx 1, :fn-params-more [key seconds & args], :fn-params-fixed [key seconds], :req-args-fixed ["EXPIRE" key seconds], :fn-docstring "`EXPIRE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nSets the expiration time of a key in seconds.\nRef. https://redis.io/commands/expire/ for more info."}
"EXPIREAT" {:fn-name "expireat", :cluster-key-idx 1, :fn-params-more [key unix-time-seconds & args], :fn-params-fixed [key unix-time-seconds], :req-args-fixed ["EXPIREAT" key unix-time-seconds], :fn-docstring "`EXPIREAT` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(1)\n\nSets the expiration time of a key to a Unix timestamp.\nRef. https://redis.io/commands/expireat/ for more info."}
"EXPIRETIME" {:fn-name "expiretime", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["EXPIRETIME" key], :fn-docstring "`EXPIRETIME` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nReturns the expiration time of a key as a Unix timestamp.\nRef. https://redis.io/commands/expiretime/ for more info."}
"FAILOVER" {:fn-name "failover", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FAILOVER"], :fn-docstring "`FAILOVER` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nStarts a coordinated failover from a server to one of its replicas.\nRef. https://redis.io/commands/failover/ for more info."}
"FCALL" {:fn-name "fcall", :cluster-key-idx 1, :fn-params-more [function numkeys & args], :fn-params-fixed [function numkeys], :req-args-fixed ["FCALL" function numkeys], :fn-docstring "`FCALL` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: Depends on the function that is executed.\n\nInvokes a function.\nRef. https://redis.io/commands/fcall/ for more info."}
"FCALL_RO" {:fn-name "fcall_ro", :cluster-key-idx 1, :fn-params-more [function numkeys & args], :fn-params-fixed [function numkeys], :req-args-fixed ["FCALL_RO" function numkeys], :fn-docstring "`FCALL_RO` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: Depends on the function that is executed.\n\nInvokes a read-only function.\nRef. https://redis.io/commands/fcall_ro/ for more info."}
"FLUSHALL" {:fn-name "flushall", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FLUSHALL"], :fn-docstring "`FLUSHALL` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the total number of keys in all databases\n\nRemoves all keys from all databases.\nRef. https://redis.io/commands/flushall/ for more info."}
"FLUSHDB" {:fn-name "flushdb", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FLUSHDB"], :fn-docstring "`FLUSHDB` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of keys in the selected database\n\nRemove all keys from the current database.\nRef. https://redis.io/commands/flushdb/ for more info."}
"FUNCTION" {:fn-name "function", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["FUNCTION" arg1], :fn-docstring "`FUNCTION` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: Depends on subcommand.\n\nA container for function commands.\nRef. https://redis.io/commands/function/ for more info."}
"FUNCTION DELETE" {:fn-name "function-delete", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [library-name], :req-args-fixed ["FUNCTION" "DELETE" library-name], :fn-docstring "`FUNCTION DELETE` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nDeletes a library and its functions.\nRef. https://redis.io/commands/function-delete/ for more info."}
"FUNCTION DUMP" {:fn-name "function-dump", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "DUMP"], :fn-docstring "`FUNCTION DUMP` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of functions\n\nDumps all libraries into a serialized binary payload.\nRef. https://redis.io/commands/function-dump/ for more info."}
"FUNCTION FLUSH" {:fn-name "function-flush", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FUNCTION" "FLUSH"], :fn-docstring "`FUNCTION FLUSH` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of functions deleted\n\nDeletes all libraries and functions.\nRef. https://redis.io/commands/function-flush/ for more info."}
"FUNCTION HELP" {:fn-name "function-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "HELP"], :fn-docstring "`FUNCTION HELP` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/function-help/ for more info."}
"FUNCTION KILL" {:fn-name "function-kill", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "KILL"], :fn-docstring "`FUNCTION KILL` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nTerminates a function during execution.\nRef. https://redis.io/commands/function-kill/ for more info."}
"FUNCTION LIST" {:fn-name "function-list", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["FUNCTION" "LIST"], :fn-docstring "`FUNCTION LIST` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of functions\n\nReturns information about all libraries.\nRef. https://redis.io/commands/function-list/ for more info."}
"FUNCTION LOAD" {:fn-name "function-load", :cluster-key-idx 2, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["FUNCTION" "LOAD" arg1], :fn-docstring "`FUNCTION LOAD` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1) (considering compilation time is redundant)\n\nCreates a library.\nRef. https://redis.io/commands/function-load/ for more info."}
"FUNCTION RESTORE" {:fn-name "function-restore", :cluster-key-idx 2, :fn-params-more [serialized-value & args], :fn-params-fixed [serialized-value], :req-args-fixed ["FUNCTION" "RESTORE" serialized-value], :fn-docstring "`FUNCTION RESTORE` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of functions on the payload\n\nRestores all libraries from a payload.\nRef. https://redis.io/commands/function-restore/ for more info."}
"FUNCTION STATS" {:fn-name "function-stats", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["FUNCTION" "STATS"], :fn-docstring "`FUNCTION STATS` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nReturns information about a function during execution.\nRef. https://redis.io/commands/function-stats/ for more info."}
"GEOADD" {:fn-name "geoadd", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 arg3 & args], :fn-params-fixed [key arg1 arg2 arg3], :req-args-fixed ["GEOADD" key arg1 arg2 arg3], :fn-docstring "`GEOADD` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.\n\nAdds one or more members to a geospatial index. The key is created if it doesn't exist.\nRef. https://redis.io/commands/geoadd/ for more info."}
"GEODIST" {:fn-name "geodist", :cluster-key-idx 1, :fn-params-more [key member1 member2 & args], :fn-params-fixed [key member1 member2], :req-args-fixed ["GEODIST" key member1 member2], :fn-docstring "`GEODIST` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(log(N))\n\nReturns the distance between two members of a geospatial index.\nRef. https://redis.io/commands/geodist/ for more info."}
"GEOHASH" {:fn-name "geohash", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["GEOHASH" key], :fn-docstring "`GEOHASH` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(log(N)) for each member requested, where N is the number of elements in the sorted set.\n\nReturns members from a geospatial index as geohash strings.\nRef. https://redis.io/commands/geohash/ for more info."}
"GEOPOS" {:fn-name "geopos", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["GEOPOS" key], :fn-docstring "`GEOPOS` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(N) where N is the number of members requested.\n\nReturns the longitude and latitude of members from a geospatial index.\nRef. https://redis.io/commands/geopos/ for more info."}
"GEORADIUS" {:fn-name "georadius", :cluster-key-idx 1, :fn-params-more [key longitude latitude radius arg1 & args], :fn-params-fixed [key longitude latitude radius arg1], :req-args-fixed ["GEORADIUS" key longitude latitude radius arg1], :fn-docstring "`GEORADIUS` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nQueries a geospatial index for members within a distance from a coordinate, optionally stores the result.\nRef. https://redis.io/commands/georadius/ for more info."}
"GEORADIUSBYMEMBER" {:fn-name "georadiusbymember", :cluster-key-idx 1, :fn-params-more [key member radius arg1 & args], :fn-params-fixed [key member radius arg1], :req-args-fixed ["GEORADIUSBYMEMBER" key member radius arg1], :fn-docstring "`GEORADIUSBYMEMBER` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nQueries a geospatial index for members within a distance from a member, optionally stores the result.\nRef. https://redis.io/commands/georadiusbymember/ for more info."}
"GEORADIUSBYMEMBER_RO" {:fn-name "georadiusbymember_ro", :cluster-key-idx 1, :fn-params-more [key member radius arg1 & args], :fn-params-fixed [key member radius arg1], :req-args-fixed ["GEORADIUSBYMEMBER_RO" key member radius arg1], :fn-docstring "`GEORADIUSBYMEMBER_RO` - Redis command function.\n  Available since: Redis 3.2.10\n       Complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nReturns members from a geospatial index that are within a distance from a member.\nRef. https://redis.io/commands/georadiusbymember_ro/ for more info."}
"GEORADIUS_RO" {:fn-name "georadius_ro", :cluster-key-idx 1, :fn-params-more [key longitude latitude radius arg1 & args], :fn-params-fixed [key longitude latitude radius arg1], :req-args-fixed ["GEORADIUS_RO" key longitude latitude radius arg1], :fn-docstring "`GEORADIUS_RO` - Redis command function.\n  Available since: Redis 3.2.10\n       Complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nReturns members from a geospatial index that are within a distance from a coordinate.\nRef. https://redis.io/commands/georadius_ro/ for more info."}
"GEOSEARCH" {:fn-name "geosearch", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 arg3 arg4 arg5 & args], :fn-params-fixed [key arg1 arg2 arg3 arg4 arg5], :req-args-fixed ["GEOSEARCH" key arg1 arg2 arg3 arg4 arg5], :fn-docstring "`GEOSEARCH` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape\n\nQueries a geospatial index for members inside an area of a box or a circle.\nRef. https://redis.io/commands/geosearch/ for more info."}
"GEOSEARCHSTORE" {:fn-name "geosearchstore", :cluster-key-idx 1, :fn-params-more [destination source arg1 arg2 arg3 arg4 arg5 & args], :fn-params-fixed [destination source arg1 arg2 arg3 arg4 arg5], :req-args-fixed ["GEOSEARCHSTORE" destination source arg1 arg2 arg3 arg4 arg5], :fn-docstring "`GEOSEARCHSTORE` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape\n\nQueries a geospatial index for members inside an area of a box or a circle, optionally stores the result.\nRef. https://redis.io/commands/geosearchstore/ for more info."}
"GET" {:fn-name "get", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["GET" key], :fn-docstring "`GET` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the string value of a key.\nRef. https://redis.io/commands/get/ for more info."}
"GETBIT" {:fn-name "getbit", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key offset], :req-args-fixed ["GETBIT" key offset], :fn-docstring "`GETBIT` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1)\n\nReturns a bit value by offset.\nRef. https://redis.io/commands/getbit/ for more info."}
"GETDEL" {:fn-name "getdel", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["GETDEL" key], :fn-docstring "`GETDEL` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nReturns the string value of a key after deleting the key.\nRef. https://redis.io/commands/getdel/ for more info."}
"GETEX" {:fn-name "getex", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["GETEX" key], :fn-docstring "`GETEX` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nReturns the string value of a key after setting its expiration time.\nRef. https://redis.io/commands/getex/ for more info."}
"GETRANGE" {:fn-name "getrange", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start end], :req-args-fixed ["GETRANGE" key start end], :fn-docstring "`GETRANGE` - Redis command function.\n  Available since: Redis 2.4.0\n       Complexity: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.\n\nReturns a substring of the string stored at a key.\nRef. https://redis.io/commands/getrange/ for more info."}
"GETSET" {:fn-name "getset", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key value], :req-args-fixed ["GETSET" key value], :fn-docstring "`GETSET` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the previous string value of a key after setting it to a new value.\nRef. https://redis.io/commands/getset/ for more info."}
"HDEL" {:fn-name "hdel", :cluster-key-idx 1, :fn-params-more [key field & args], :fn-params-fixed [key field], :req-args-fixed ["HDEL" key field], :fn-docstring "`HDEL` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of fields to be removed.\n\nDeletes one or more fields and their values from a hash. Deletes the hash if no fields remain.\nRef. https://redis.io/commands/hdel/ for more info."}
"HELLO" {:fn-name "hello", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["HELLO"], :fn-docstring "`HELLO` - Redis command function.\n  Available since: Redis 6.0.0\n       Complexity: O(1)\n\nHandshakes with the Redis server.\nRef. https://redis.io/commands/hello/ for more info."}
"HEXISTS" {:fn-name "hexists", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field], :req-args-fixed ["HEXISTS" key field], :fn-docstring "`HEXISTS` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1)\n\nDetermines whether a field exists in a hash.\nRef. https://redis.io/commands/hexists/ for more info."}
"HGET" {:fn-name "hget", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field], :req-args-fixed ["HGET" key field], :fn-docstring "`HGET` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1)\n\nReturns the value of a field in a hash.\nRef. https://redis.io/commands/hget/ for more info."}
"HGETALL" {:fn-name "hgetall", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HGETALL" key], :fn-docstring "`HGETALL` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the size of the hash.\n\nReturns all fields and values in a hash.\nRef. https://redis.io/commands/hgetall/ for more info."}
"HINCRBY" {:fn-name "hincrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field increment], :req-args-fixed ["HINCRBY" key field increment], :fn-docstring "`HINCRBY` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1)\n\nIncrements the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.\nRef. https://redis.io/commands/hincrby/ for more info."}
"HINCRBYFLOAT" {:fn-name "hincrbyfloat", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field increment], :req-args-fixed ["HINCRBYFLOAT" key field increment], :fn-docstring "`HINCRBYFLOAT` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nIncrements the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.\nRef. https://redis.io/commands/hincrbyfloat/ for more info."}
"HKEYS" {:fn-name "hkeys", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HKEYS" key], :fn-docstring "`HKEYS` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the size of the hash.\n\nReturns all fields in a hash.\nRef. https://redis.io/commands/hkeys/ for more info."}
"HLEN" {:fn-name "hlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HLEN" key], :fn-docstring "`HLEN` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1)\n\nReturns the number of fields in a hash.\nRef. https://redis.io/commands/hlen/ for more info."}
"HMGET" {:fn-name "hmget", :cluster-key-idx 1, :fn-params-more [key field & args], :fn-params-fixed [key field], :req-args-fixed ["HMGET" key field], :fn-docstring "`HMGET` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of fields being requested.\n\nReturns the values of all fields in a hash.\nRef. https://redis.io/commands/hmget/ for more info."}
"HMSET" {:fn-name "hmset", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["HMSET" key arg1 arg2], :fn-docstring "`HMSET` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of fields being set.\n\nSets the values of multiple fields.\nRef. https://redis.io/commands/hmset/ for more info."}
"HRANDFIELD" {:fn-name "hrandfield", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["HRANDFIELD" key], :fn-docstring "`HRANDFIELD` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N) where N is the number of fields returned\n\nReturns one or more random fields from a hash.\nRef. https://redis.io/commands/hrandfield/ for more info."}
"HSCAN" {:fn-name "hscan", :cluster-key-idx 1, :fn-params-more [key cursor & args], :fn-params-fixed [key cursor], :req-args-fixed ["HSCAN" key cursor], :fn-docstring "`HSCAN` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nIterates over fields and values of a hash.\nRef. https://redis.io/commands/hscan/ for more info."}
"HSET" {:fn-name "hset", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["HSET" key arg1 arg2], :fn-docstring "`HSET` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.\n\nCreates or modifies the value of a field in a hash.\nRef. https://redis.io/commands/hset/ for more info."}
"HSETNX" {:fn-name "hsetnx", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field value], :req-args-fixed ["HSETNX" key field value], :fn-docstring "`HSETNX` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1)\n\nSets the value of a field in a hash only when the field doesn't exist.\nRef. https://redis.io/commands/hsetnx/ for more info."}
"HSTRLEN" {:fn-name "hstrlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key field], :req-args-fixed ["HSTRLEN" key field], :fn-docstring "`HSTRLEN` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(1)\n\nReturns the length of the value of a field.\nRef. https://redis.io/commands/hstrlen/ for more info."}
"HVALS" {:fn-name "hvals", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["HVALS" key], :fn-docstring "`HVALS` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the size of the hash.\n\nReturns all values in a hash.\nRef. https://redis.io/commands/hvals/ for more info."}
"INCR" {:fn-name "incr", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["INCR" key], :fn-docstring "`INCR` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nIncrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.\nRef. https://redis.io/commands/incr/ for more info."}
"INCRBY" {:fn-name "incrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key increment], :req-args-fixed ["INCRBY" key increment], :fn-docstring "`INCRBY` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nIncrements the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.\nRef. https://redis.io/commands/incrby/ for more info."}
"INCRBYFLOAT" {:fn-name "incrbyfloat", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key increment], :req-args-fixed ["INCRBYFLOAT" key increment], :fn-docstring "`INCRBYFLOAT` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nIncrement the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.\nRef. https://redis.io/commands/incrbyfloat/ for more info."}
"INFO" {:fn-name "info", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["INFO"], :fn-docstring "`INFO` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns information and statistics about the server.\nRef. https://redis.io/commands/info/ for more info."}
"KEYS" {:fn-name "keys", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [pattern], :req-args-fixed ["KEYS" pattern], :fn-docstring "`KEYS` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.\n\nReturns all key names that match a pattern.\nRef. https://redis.io/commands/keys/ for more info."}
"LASTSAVE" {:fn-name "lastsave", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LASTSAVE"], :fn-docstring "`LASTSAVE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the Unix timestamp of the last successful save to disk.\nRef. https://redis.io/commands/lastsave/ for more info."}
"LATENCY" {:fn-name "latency", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["LATENCY" arg1], :fn-docstring "`LATENCY` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: Depends on subcommand.\n\nA container for latency diagnostics commands.\nRef. https://redis.io/commands/latency/ for more info."}
"LATENCY DOCTOR" {:fn-name "latency-doctor", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LATENCY" "DOCTOR"], :fn-docstring "`LATENCY DOCTOR` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(1)\n\nReturns a human-readable latency analysis report.\nRef. https://redis.io/commands/latency-doctor/ for more info."}
"LATENCY GRAPH" {:fn-name "latency-graph", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [event], :req-args-fixed ["LATENCY" "GRAPH" event], :fn-docstring "`LATENCY GRAPH` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(1)\n\nReturns a latency graph for an event.\nRef. https://redis.io/commands/latency-graph/ for more info."}
"LATENCY HELP" {:fn-name "latency-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LATENCY" "HELP"], :fn-docstring "`LATENCY HELP` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/latency-help/ for more info."}
"LATENCY HISTOGRAM" {:fn-name "latency-histogram", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["LATENCY" "HISTOGRAM"], :fn-docstring "`LATENCY HISTOGRAM` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of commands with latency information being retrieved.\n\nReturns the cumulative distribution of latencies of a subset or all commands.\nRef. https://redis.io/commands/latency-histogram/ for more info."}
"LATENCY HISTORY" {:fn-name "latency-history", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [event], :req-args-fixed ["LATENCY" "HISTORY" event], :fn-docstring "`LATENCY HISTORY` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(1)\n\nReturns timestamp-latency samples for an event.\nRef. https://redis.io/commands/latency-history/ for more info."}
"LATENCY LATEST" {:fn-name "latency-latest", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["LATENCY" "LATEST"], :fn-docstring "`LATENCY LATEST` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(1)\n\nReturns the latest latency samples for all events.\nRef. https://redis.io/commands/latency-latest/ for more info."}
"LATENCY RESET" {:fn-name "latency-reset", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["LATENCY" "RESET"], :fn-docstring "`LATENCY RESET` - Redis command function.\n  Available since: Redis 2.8.13\n       Complexity: O(1)\n\nResets the latency data for one or more events.\nRef. https://redis.io/commands/latency-reset/ for more info."}
"LCS" {:fn-name "lcs", :cluster-key-idx 1, :fn-params-more [key1 key2 & args], :fn-params-fixed [key1 key2], :req-args-fixed ["LCS" key1 key2], :fn-docstring "`LCS` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N*M) where N and M are the lengths of s1 and s2, respectively\n\nFinds the longest common substring.\nRef. https://redis.io/commands/lcs/ for more info."}
"LINDEX" {:fn-name "lindex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key index], :req-args-fixed ["LINDEX" key index], :fn-docstring "`LINDEX` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).\n\nReturns an element from a list by its index.\nRef. https://redis.io/commands/lindex/ for more info."}
"LINSERT" {:fn-name "linsert", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key arg1 arg2 arg3], :req-args-fixed ["LINSERT" key arg1 arg2 arg3], :fn-docstring "`LINSERT` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).\n\nInserts an element before or after another element in a list.\nRef. https://redis.io/commands/linsert/ for more info."}
"LLEN" {:fn-name "llen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["LLEN" key], :fn-docstring "`LLEN` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the length of a list.\nRef. https://redis.io/commands/llen/ for more info."}
"LMOVE" {:fn-name "lmove", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination arg1 arg2], :req-args-fixed ["LMOVE" source destination arg1 arg2], :fn-docstring "`LMOVE` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nReturns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.\nRef. https://redis.io/commands/lmove/ for more info."}
"LMPOP" {:fn-name "lmpop", :cluster-key-idx 1, :fn-params-more [numkeys key arg1 & args], :fn-params-fixed [numkeys key arg1], :req-args-fixed ["LMPOP" numkeys key arg1], :fn-docstring "`LMPOP` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned.\n\nReturns multiple elements from a list after removing them. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/lmpop/ for more info."}
"LOLWUT" {:fn-name "lolwut", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["LOLWUT"], :fn-docstring "`LOLWUT` - Redis command function.\n  Available since: Redis 5.0.0\n\nDisplays computer art and the Redis version\nRef. https://redis.io/commands/lolwut/ for more info."}
"LPOP" {:fn-name "lpop", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["LPOP" key], :fn-docstring "`LPOP` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of elements returned\n\nReturns the first elements in a list after removing it. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/lpop/ for more info."}
"LPOS" {:fn-name "lpos", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["LPOS" key element], :fn-docstring "`LPOS` - Redis command function.\n  Available since: Redis 6.0.6\n       Complexity: O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.\n\nReturns the index of matching elements in a list.\nRef. https://redis.io/commands/lpos/ for more info."}
"LPUSH" {:fn-name "lpush", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["LPUSH" key element], :fn-docstring "`LPUSH` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nPrepends one or more elements to a list. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/lpush/ for more info."}
"LPUSHX" {:fn-name "lpushx", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["LPUSHX" key element], :fn-docstring "`LPUSHX` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nPrepends one or more elements to a list only when the list exists.\nRef. https://redis.io/commands/lpushx/ for more info."}
"LRANGE" {:fn-name "lrange", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start stop], :req-args-fixed ["LRANGE" key start stop], :fn-docstring "`LRANGE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.\n\nReturns a range of elements from a list.\nRef. https://redis.io/commands/lrange/ for more info."}
"LREM" {:fn-name "lrem", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key count element], :req-args-fixed ["LREM" key count element], :fn-docstring "`LREM` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N+M) where N is the length of the list and M is the number of elements removed.\n\nRemoves elements from a list. Deletes the list if the last element was removed.\nRef. https://redis.io/commands/lrem/ for more info."}
"LSET" {:fn-name "lset", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key index element], :req-args-fixed ["LSET" key index element], :fn-docstring "`LSET` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).\n\nSets the value of an element in a list by its index.\nRef. https://redis.io/commands/lset/ for more info."}
"LTRIM" {:fn-name "ltrim", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start stop], :req-args-fixed ["LTRIM" key start stop], :fn-docstring "`LTRIM` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of elements to be removed by the operation.\n\nRemoves elements from both ends a list. Deletes the list if all elements were trimmed.\nRef. https://redis.io/commands/ltrim/ for more info."}
"MEMORY" {:fn-name "memory", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["MEMORY" arg1], :fn-docstring "`MEMORY` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: Depends on subcommand.\n\nA container for memory diagnostics commands.\nRef. https://redis.io/commands/memory/ for more info."}
"MEMORY DOCTOR" {:fn-name "memory-doctor", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "DOCTOR"], :fn-docstring "`MEMORY DOCTOR` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(1)\n\nOutputs a memory problems report.\nRef. https://redis.io/commands/memory-doctor/ for more info."}
"MEMORY HELP" {:fn-name "memory-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "HELP"], :fn-docstring "`MEMORY HELP` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/memory-help/ for more info."}
"MEMORY MALLOC-STATS" {:fn-name "memory-malloc-stats", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "MALLOC-STATS"], :fn-docstring "`MEMORY MALLOC-STATS` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: Depends on how much memory is allocated, could be slow\n\nReturns the allocator statistics.\nRef. https://redis.io/commands/memory-malloc-stats/ for more info."}
"MEMORY PURGE" {:fn-name "memory-purge", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "PURGE"], :fn-docstring "`MEMORY PURGE` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: Depends on how much memory is allocated, could be slow\n\nAsks the allocator to release memory.\nRef. https://redis.io/commands/memory-purge/ for more info."}
"MEMORY STATS" {:fn-name "memory-stats", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MEMORY" "STATS"], :fn-docstring "`MEMORY STATS` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(1)\n\nReturns details about memory usage.\nRef. https://redis.io/commands/memory-stats/ for more info."}
"MEMORY USAGE" {:fn-name "memory-usage", :cluster-key-idx 2, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["MEMORY" "USAGE" key], :fn-docstring "`MEMORY USAGE` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(N) where N is the number of samples.\n\nEstimates the memory usage of a key.\nRef. https://redis.io/commands/memory-usage/ for more info."}
"MGET" {:fn-name "mget", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["MGET" key], :fn-docstring "`MGET` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of keys to retrieve.\n\nAtomically returns the string values of one or more keys.\nRef. https://redis.io/commands/mget/ for more info."}
"MIGRATE" {:fn-name "migrate", :cluster-key-idx 1, :fn-params-more [host port arg1 arg2 arg3 & args], :fn-params-fixed [host port arg1 arg2 arg3], :req-args-fixed ["MIGRATE" host port arg1 arg2 arg3], :fn-docstring "`MIGRATE` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.\n\nAtomically transfers a key from one Redis instance to another.\nRef. https://redis.io/commands/migrate/ for more info."}
"MODULE" {:fn-name "module", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["MODULE" arg1], :fn-docstring "`MODULE` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: Depends on subcommand.\n\nA container for module commands.\nRef. https://redis.io/commands/module/ for more info."}
"MODULE HELP" {:fn-name "module-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MODULE" "HELP"], :fn-docstring "`MODULE HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/module-help/ for more info."}
"MODULE LIST" {:fn-name "module-list", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MODULE" "LIST"], :fn-docstring "`MODULE LIST` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(N) where N is the number of loaded modules.\n\nReturns all loaded modules.\nRef. https://redis.io/commands/module-list/ for more info."}
"MODULE LOAD" {:fn-name "module-load", :cluster-key-idx 2, :fn-params-more [path & args], :fn-params-fixed [path], :req-args-fixed ["MODULE" "LOAD" path], :fn-docstring "`MODULE LOAD` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(1)\n\nLoads a module.\nRef. https://redis.io/commands/module-load/ for more info."}
"MODULE LOADEX" {:fn-name "module-loadex", :cluster-key-idx 2, :fn-params-more [path & args], :fn-params-fixed [path], :req-args-fixed ["MODULE" "LOADEX" path], :fn-docstring "`MODULE LOADEX` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nLoads a module using extended parameters.\nRef. https://redis.io/commands/module-loadex/ for more info."}
"MODULE UNLOAD" {:fn-name "module-unload", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [name], :req-args-fixed ["MODULE" "UNLOAD" name], :fn-docstring "`MODULE UNLOAD` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(1)\n\nUnloads a module.\nRef. https://redis.io/commands/module-unload/ for more info."}
"MONITOR" {:fn-name "monitor", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MONITOR"], :fn-docstring "`MONITOR` - Redis command function.\n  Available since: Redis 1.0.0\n\nListens for all requests received by the server in real-time.\nRef. https://redis.io/commands/monitor/ for more info."}
"MOVE" {:fn-name "move", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key db], :req-args-fixed ["MOVE" key db], :fn-docstring "`MOVE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nMoves a key to another database.\nRef. https://redis.io/commands/move/ for more info."}
"MSET" {:fn-name "mset", :cluster-key-idx 1, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["MSET" arg1 arg2], :fn-docstring "`MSET` - Redis command function.\n  Available since: Redis 1.0.1\n       Complexity: O(N) where N is the number of keys to set.\n\nAtomically creates or modifies the string values of one or more keys.\nRef. https://redis.io/commands/mset/ for more info."}
"MSETNX" {:fn-name "msetnx", :cluster-key-idx 1, :fn-params-more [arg1 arg2 & args], :fn-params-fixed [arg1 arg2], :req-args-fixed ["MSETNX" arg1 arg2], :fn-docstring "`MSETNX` - Redis command function.\n  Available since: Redis 1.0.1\n       Complexity: O(N) where N is the number of keys to set.\n\nAtomically modifies the string values of one or more keys only when all keys don't exist.\nRef. https://redis.io/commands/msetnx/ for more info."}
"MULTI" {:fn-name "multi", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["MULTI"], :fn-docstring "`MULTI` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(1)\n\nStarts a transaction.\nRef. https://redis.io/commands/multi/ for more info."}
"OBJECT" {:fn-name "object", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["OBJECT" arg1], :fn-docstring "`OBJECT` - Redis command function.\n  Available since: Redis 2.2.3\n       Complexity: Depends on subcommand.\n\nA container for object introspection commands.\nRef. https://redis.io/commands/object/ for more info."}
"OBJECT ENCODING" {:fn-name "object-encoding", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "ENCODING" key], :fn-docstring "`OBJECT ENCODING` - Redis command function.\n  Available since: Redis 2.2.3\n       Complexity: O(1)\n\nReturns the internal encoding of a Redis object.\nRef. https://redis.io/commands/object-encoding/ for more info."}
"OBJECT FREQ" {:fn-name "object-freq", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "FREQ" key], :fn-docstring "`OBJECT FREQ` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(1)\n\nReturns the logarithmic access frequency counter of a Redis object.\nRef. https://redis.io/commands/object-freq/ for more info."}
"OBJECT HELP" {:fn-name "object-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["OBJECT" "HELP"], :fn-docstring "`OBJECT HELP` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/object-help/ for more info."}
"OBJECT IDLETIME" {:fn-name "object-idletime", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "IDLETIME" key], :fn-docstring "`OBJECT IDLETIME` - Redis command function.\n  Available since: Redis 2.2.3\n       Complexity: O(1)\n\nReturns the time since the last access to a Redis object.\nRef. https://redis.io/commands/object-idletime/ for more info."}
"OBJECT REFCOUNT" {:fn-name "object-refcount", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["OBJECT" "REFCOUNT" key], :fn-docstring "`OBJECT REFCOUNT` - Redis command function.\n  Available since: Redis 2.2.3\n       Complexity: O(1)\n\nReturns the reference count of a value of a key.\nRef. https://redis.io/commands/object-refcount/ for more info."}
"PERSIST" {:fn-name "persist", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["PERSIST" key], :fn-docstring "`PERSIST` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1)\n\nRemoves the expiration time of a key.\nRef. https://redis.io/commands/persist/ for more info."}
"PEXPIRE" {:fn-name "pexpire", :cluster-key-idx 1, :fn-params-more [key milliseconds & args], :fn-params-fixed [key milliseconds], :req-args-fixed ["PEXPIRE" key milliseconds], :fn-docstring "`PEXPIRE` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nSets the expiration time of a key in milliseconds.\nRef. https://redis.io/commands/pexpire/ for more info."}
"PEXPIREAT" {:fn-name "pexpireat", :cluster-key-idx 1, :fn-params-more [key unix-time-milliseconds & args], :fn-params-fixed [key unix-time-milliseconds], :req-args-fixed ["PEXPIREAT" key unix-time-milliseconds], :fn-docstring "`PEXPIREAT` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nSets the expiration time of a key to a Unix milliseconds timestamp.\nRef. https://redis.io/commands/pexpireat/ for more info."}
"PEXPIRETIME" {:fn-name "pexpiretime", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["PEXPIRETIME" key], :fn-docstring "`PEXPIRETIME` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(1)\n\nReturns the expiration time of a key as a Unix milliseconds timestamp.\nRef. https://redis.io/commands/pexpiretime/ for more info."}
"PFADD" {:fn-name "pfadd", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["PFADD" key], :fn-docstring "`PFADD` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: O(1) to add every element.\n\nAdds elements to a HyperLogLog key. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/pfadd/ for more info."}
"PFCOUNT" {:fn-name "pfcount", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["PFCOUNT" key], :fn-docstring "`PFCOUNT` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.\n\nReturns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).\nRef. https://redis.io/commands/pfcount/ for more info."}
"PFDEBUG" {:fn-name "pfdebug", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [subcommand key], :req-args-fixed ["PFDEBUG" subcommand key], :fn-docstring "`PFDEBUG` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: N/A\n\nInternal commands for debugging HyperLogLog values.\nRef. https://redis.io/commands/pfdebug/ for more info."}
"PFMERGE" {:fn-name "pfmerge", :cluster-key-idx 1, :fn-params-more [destkey & args], :fn-params-fixed [destkey], :req-args-fixed ["PFMERGE" destkey], :fn-docstring "`PFMERGE` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: O(N) to merge N HyperLogLogs, but with high constant times.\n\nMerges one or more HyperLogLog values into a single key.\nRef. https://redis.io/commands/pfmerge/ for more info."}
"PFSELFTEST" {:fn-name "pfselftest", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["PFSELFTEST"], :fn-docstring "`PFSELFTEST` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: N/A\n\nAn internal command for testing HyperLogLog values.\nRef. https://redis.io/commands/pfselftest/ for more info."}
"PING" {:fn-name "ping", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PING"], :fn-docstring "`PING` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the server's liveliness response.\nRef. https://redis.io/commands/ping/ for more info."}
"PSETEX" {:fn-name "psetex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key milliseconds value], :req-args-fixed ["PSETEX" key milliseconds value], :fn-docstring "`PSETEX` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nSets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.\nRef. https://redis.io/commands/psetex/ for more info."}
"PSUBSCRIBE" {:fn-name "psubscribe", :cluster-key-idx 1, :fn-params-more [pattern & args], :fn-params-fixed [pattern], :req-args-fixed ["PSUBSCRIBE" pattern], :fn-docstring "`PSUBSCRIBE` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of patterns to subscribe to.\n\nListens for messages published to channels that match one or more patterns.\nRef. https://redis.io/commands/psubscribe/ for more info."}
"PSYNC" {:fn-name "psync", :cluster-key-idx 1, :fn-params-more [replicationid offset & args], :fn-params-fixed [replicationid offset], :req-args-fixed ["PSYNC" replicationid offset], :fn-docstring "`PSYNC` - Redis command function.\n  Available since: Redis 2.8.0\n\nAn internal command used in replication.\nRef. https://redis.io/commands/psync/ for more info."}
"PTTL" {:fn-name "pttl", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["PTTL" key], :fn-docstring "`PTTL` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nReturns the expiration time in milliseconds of a key.\nRef. https://redis.io/commands/pttl/ for more info."}
"PUBLISH" {:fn-name "publish", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [channel message], :req-args-fixed ["PUBLISH" channel message], :fn-docstring "`PUBLISH` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).\n\nPosts a message to a channel.\nRef. https://redis.io/commands/publish/ for more info."}
"PUBSUB" {:fn-name "pubsub", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["PUBSUB" arg1], :fn-docstring "`PUBSUB` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: Depends on subcommand.\n\nA container for Pub/Sub commands.\nRef. https://redis.io/commands/pubsub/ for more info."}
"PUBSUB CHANNELS" {:fn-name "pubsub-channels", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "CHANNELS"], :fn-docstring "`PUBSUB CHANNELS` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)\n\nReturns the active channels.\nRef. https://redis.io/commands/pubsub-channels/ for more info."}
"PUBSUB HELP" {:fn-name "pubsub-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["PUBSUB" "HELP"], :fn-docstring "`PUBSUB HELP` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/pubsub-help/ for more info."}
"PUBSUB NUMPAT" {:fn-name "pubsub-numpat", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["PUBSUB" "NUMPAT"], :fn-docstring "`PUBSUB NUMPAT` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(1)\n\nReturns a count of unique pattern subscriptions.\nRef. https://redis.io/commands/pubsub-numpat/ for more info."}
"PUBSUB NUMSUB" {:fn-name "pubsub-numsub", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "NUMSUB"], :fn-docstring "`PUBSUB NUMSUB` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(N) for the NUMSUB subcommand, where N is the number of requested channels\n\nReturns a count of subscribers to channels.\nRef. https://redis.io/commands/pubsub-numsub/ for more info."}
"PUBSUB SHARDCHANNELS" {:fn-name "pubsub-shardchannels", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "SHARDCHANNELS"], :fn-docstring "`PUBSUB SHARDCHANNELS` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).\n\nReturns the active shard channels.\nRef. https://redis.io/commands/pubsub-shardchannels/ for more info."}
"PUBSUB SHARDNUMSUB" {:fn-name "pubsub-shardnumsub", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUBSUB" "SHARDNUMSUB"], :fn-docstring "`PUBSUB SHARDNUMSUB` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels\n\nReturns the count of subscribers of shard channels.\nRef. https://redis.io/commands/pubsub-shardnumsub/ for more info."}
"PUNSUBSCRIBE" {:fn-name "punsubscribe", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["PUNSUBSCRIBE"], :fn-docstring "`PUNSUBSCRIBE` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of patterns to unsubscribe.\n\nStops listening to messages published to channels that match one or more patterns.\nRef. https://redis.io/commands/punsubscribe/ for more info."}
"QUIT" {:fn-name "quit", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["QUIT"], :fn-docstring "`QUIT` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nCloses the connection.\nRef. https://redis.io/commands/quit/ for more info."}
"RANDOMKEY" {:fn-name "randomkey", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["RANDOMKEY"], :fn-docstring "`RANDOMKEY` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns a random key name from the database.\nRef. https://redis.io/commands/randomkey/ for more info."}
"READONLY" {:fn-name "readonly", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["READONLY"], :fn-docstring "`READONLY` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nEnables read-only queries for a connection to a Redis Cluster replica node.\nRef. https://redis.io/commands/readonly/ for more info."}
"READWRITE" {:fn-name "readwrite", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["READWRITE"], :fn-docstring "`READWRITE` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nEnables read-write queries for a connection to a Reids Cluster replica node.\nRef. https://redis.io/commands/readwrite/ for more info."}
"RENAME" {:fn-name "rename", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key newkey], :req-args-fixed ["RENAME" key newkey], :fn-docstring "`RENAME` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nRenames a key and overwrites the destination.\nRef. https://redis.io/commands/rename/ for more info."}
"RENAMENX" {:fn-name "renamenx", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key newkey], :req-args-fixed ["RENAMENX" key newkey], :fn-docstring "`RENAMENX` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nRenames a key only when the target key name doesn't exist.\nRef. https://redis.io/commands/renamenx/ for more info."}
"REPLCONF" {:fn-name "replconf", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["REPLCONF"], :fn-docstring "`REPLCONF` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nAn internal command for configuring the replication stream.\nRef. https://redis.io/commands/replconf/ for more info."}
"REPLICAOF" {:fn-name "replicaof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [host port], :req-args-fixed ["REPLICAOF" host port], :fn-docstring "`REPLICAOF` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nConfigures a server as replica of another, or promotes it to a master.\nRef. https://redis.io/commands/replicaof/ for more info."}
"RESET" {:fn-name "reset", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["RESET"], :fn-docstring "`RESET` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nResets the connection.\nRef. https://redis.io/commands/reset/ for more info."}
"RESTORE" {:fn-name "restore", :cluster-key-idx 1, :fn-params-more [key ttl serialized-value & args], :fn-params-fixed [key ttl serialized-value], :req-args-fixed ["RESTORE" key ttl serialized-value], :fn-docstring "`RESTORE` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).\n\nCreates a key from the serialized representation of a value.\nRef. https://redis.io/commands/restore/ for more info."}
"RESTORE-ASKING" {:fn-name "restore-asking", :cluster-key-idx 1, :fn-params-more [key ttl serialized-value & args], :fn-params-fixed [key ttl serialized-value], :req-args-fixed ["RESTORE-ASKING" key ttl serialized-value], :fn-docstring "`RESTORE-ASKING` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).\n\nAn internal command for migrating keys in a cluster.\nRef. https://redis.io/commands/restore-asking/ for more info."}
"ROLE" {:fn-name "role", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["ROLE"], :fn-docstring "`ROLE` - Redis command function.\n  Available since: Redis 2.8.12\n       Complexity: O(1)\n\nReturns the replication role.\nRef. https://redis.io/commands/role/ for more info."}
"RPOP" {:fn-name "rpop", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["RPOP" key], :fn-docstring "`RPOP` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of elements returned\n\nReturns and removes the last elements of a list. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/rpop/ for more info."}
"RPOPLPUSH" {:fn-name "rpoplpush", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination], :req-args-fixed ["RPOPLPUSH" source destination], :fn-docstring "`RPOPLPUSH` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(1)\n\nReturns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.\nRef. https://redis.io/commands/rpoplpush/ for more info."}
"RPUSH" {:fn-name "rpush", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["RPUSH" key element], :fn-docstring "`RPUSH` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nAppends one or more elements to a list. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/rpush/ for more info."}
"RPUSHX" {:fn-name "rpushx", :cluster-key-idx 1, :fn-params-more [key element & args], :fn-params-fixed [key element], :req-args-fixed ["RPUSHX" key element], :fn-docstring "`RPUSHX` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nAppends an element to a list only when the list exists.\nRef. https://redis.io/commands/rpushx/ for more info."}
"SADD" {:fn-name "sadd", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["SADD" key member], :fn-docstring "`SADD` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nAdds one or more members to a set. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/sadd/ for more info."}
"SAVE" {:fn-name "save", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SAVE"], :fn-docstring "`SAVE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the total number of keys in all databases\n\nSynchronously saves the database(s) to disk.\nRef. https://redis.io/commands/save/ for more info."}
"SCAN" {:fn-name "scan", :cluster-key-idx 1, :fn-params-more [cursor & args], :fn-params-fixed [cursor], :req-args-fixed ["SCAN" cursor], :fn-docstring "`SCAN` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nIterates over the key names in the database.\nRef. https://redis.io/commands/scan/ for more info."}
"SCARD" {:fn-name "scard", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["SCARD" key], :fn-docstring "`SCARD` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the number of members in a set.\nRef. https://redis.io/commands/scard/ for more info."}
"SCRIPT" {:fn-name "script", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["SCRIPT" arg1], :fn-docstring "`SCRIPT` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: Depends on subcommand.\n\nA container for Lua scripts management commands.\nRef. https://redis.io/commands/script/ for more info."}
"SCRIPT DEBUG" {:fn-name "script-debug", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [arg1], :req-args-fixed ["SCRIPT" "DEBUG" arg1], :fn-docstring "`SCRIPT DEBUG` - Redis command function.\n  Available since: Redis 3.2.0\n       Complexity: O(1)\n\nSets the debug mode of server-side Lua scripts.\nRef. https://redis.io/commands/script-debug/ for more info."}
"SCRIPT EXISTS" {:fn-name "script-exists", :cluster-key-idx 2, :fn-params-more [sha1 & args], :fn-params-fixed [sha1], :req-args-fixed ["SCRIPT" "EXISTS" sha1], :fn-docstring "`SCRIPT EXISTS` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).\n\nDetermines whether server-side Lua scripts exist in the script cache.\nRef. https://redis.io/commands/script-exists/ for more info."}
"SCRIPT FLUSH" {:fn-name "script-flush", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SCRIPT" "FLUSH"], :fn-docstring "`SCRIPT FLUSH` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(N) with N being the number of scripts in cache\n\nRemoves all server-side Lua scripts from the script cache.\nRef. https://redis.io/commands/script-flush/ for more info."}
"SCRIPT HELP" {:fn-name "script-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SCRIPT" "HELP"], :fn-docstring "`SCRIPT HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/script-help/ for more info."}
"SCRIPT KILL" {:fn-name "script-kill", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SCRIPT" "KILL"], :fn-docstring "`SCRIPT KILL` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nTerminates a server-side Lua script during execution.\nRef. https://redis.io/commands/script-kill/ for more info."}
"SCRIPT LOAD" {:fn-name "script-load", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [script], :req-args-fixed ["SCRIPT" "LOAD" script], :fn-docstring "`SCRIPT LOAD` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(N) with N being the length in bytes of the script body.\n\nLoads a server-side Lua script to the script cache.\nRef. https://redis.io/commands/script-load/ for more info."}
"SDIFF" {:fn-name "sdiff", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SDIFF" key], :fn-docstring "`SDIFF` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the total number of elements in all given sets.\n\nReturns the difference of multiple sets.\nRef. https://redis.io/commands/sdiff/ for more info."}
"SDIFFSTORE" {:fn-name "sdiffstore", :cluster-key-idx 1, :fn-params-more [destination key & args], :fn-params-fixed [destination key], :req-args-fixed ["SDIFFSTORE" destination key], :fn-docstring "`SDIFFSTORE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the total number of elements in all given sets.\n\nStores the difference of multiple sets in a key.\nRef. https://redis.io/commands/sdiffstore/ for more info."}
"SELECT" {:fn-name "select", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [index], :req-args-fixed ["SELECT" index], :fn-docstring "`SELECT` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nChanges the selected database.\nRef. https://redis.io/commands/select/ for more info."}
"SET" {:fn-name "set", :cluster-key-idx 1, :fn-params-more [key value & args], :fn-params-fixed [key value], :req-args-fixed ["SET" key value], :fn-docstring "`SET` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nSets the string value of a key, ignoring its type. The key is created if it doesn't exist.\nRef. https://redis.io/commands/set/ for more info."}
"SETBIT" {:fn-name "setbit", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key offset value], :req-args-fixed ["SETBIT" key offset value], :fn-docstring "`SETBIT` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1)\n\nSets or clears the bit at offset of the string value. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/setbit/ for more info."}
"SETEX" {:fn-name "setex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key seconds value], :req-args-fixed ["SETEX" key seconds value], :fn-docstring "`SETEX` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(1)\n\nSets the string value and expiration time of a key. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/setex/ for more info."}
"SETNX" {:fn-name "setnx", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key value], :req-args-fixed ["SETNX" key value], :fn-docstring "`SETNX` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nSet the string value of a key only when the key doesn't exist.\nRef. https://redis.io/commands/setnx/ for more info."}
"SETRANGE" {:fn-name "setrange", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key offset value], :req-args-fixed ["SETRANGE" key offset value], :fn-docstring "`SETRANGE` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.\n\nOverwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/setrange/ for more info."}
"SHUTDOWN" {:fn-name "shutdown", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SHUTDOWN"], :fn-docstring "`SHUTDOWN` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)\n\nSynchronously saves the database(s) to disk and shuts down the Redis server.\nRef. https://redis.io/commands/shutdown/ for more info."}
"SINTER" {:fn-name "sinter", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SINTER" key], :fn-docstring "`SINTER` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\n\nReturns the intersect of multiple sets.\nRef. https://redis.io/commands/sinter/ for more info."}
"SINTERCARD" {:fn-name "sintercard", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["SINTERCARD" numkeys key], :fn-docstring "`SINTERCARD` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\n\nReturns the number of members of the intersect of multiple sets.\nRef. https://redis.io/commands/sintercard/ for more info."}
"SINTERSTORE" {:fn-name "sinterstore", :cluster-key-idx 1, :fn-params-more [destination key & args], :fn-params-fixed [destination key], :req-args-fixed ["SINTERSTORE" destination key], :fn-docstring "`SINTERSTORE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\n\nStores the intersect of multiple sets in a key.\nRef. https://redis.io/commands/sinterstore/ for more info."}
"SISMEMBER" {:fn-name "sismember", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key member], :req-args-fixed ["SISMEMBER" key member], :fn-docstring "`SISMEMBER` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nDetermines whether a member belongs to a set.\nRef. https://redis.io/commands/sismember/ for more info."}
"SLAVEOF" {:fn-name "slaveof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [host port], :req-args-fixed ["SLAVEOF" host port], :fn-docstring "`SLAVEOF` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nSets a Redis server as a replica of another, or promotes it to being a master.\nRef. https://redis.io/commands/slaveof/ for more info."}
"SLOWLOG" {:fn-name "slowlog", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["SLOWLOG" arg1], :fn-docstring "`SLOWLOG` - Redis command function.\n  Available since: Redis 2.2.12\n       Complexity: Depends on subcommand.\n\nA container for slow log commands.\nRef. https://redis.io/commands/slowlog/ for more info."}
"SLOWLOG GET" {:fn-name "slowlog-get", :cluster-key-idx 2, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "GET"], :fn-docstring "`SLOWLOG GET` - Redis command function.\n  Available since: Redis 2.2.12\n       Complexity: O(N) where N is the number of entries returned\n\nReturns the slow log's entries.\nRef. https://redis.io/commands/slowlog-get/ for more info."}
"SLOWLOG HELP" {:fn-name "slowlog-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "HELP"], :fn-docstring "`SLOWLOG HELP` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nShow helpful text about the different subcommands\nRef. https://redis.io/commands/slowlog-help/ for more info."}
"SLOWLOG LEN" {:fn-name "slowlog-len", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "LEN"], :fn-docstring "`SLOWLOG LEN` - Redis command function.\n  Available since: Redis 2.2.12\n       Complexity: O(1)\n\nReturns the number of entries in the slow log.\nRef. https://redis.io/commands/slowlog-len/ for more info."}
"SLOWLOG RESET" {:fn-name "slowlog-reset", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SLOWLOG" "RESET"], :fn-docstring "`SLOWLOG RESET` - Redis command function.\n  Available since: Redis 2.2.12\n       Complexity: O(N) where N is the number of entries in the slowlog\n\nClears all entries from the slow log.\nRef. https://redis.io/commands/slowlog-reset/ for more info."}
"SMEMBERS" {:fn-name "smembers", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["SMEMBERS" key], :fn-docstring "`SMEMBERS` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the set cardinality.\n\nReturns all members of a set.\nRef. https://redis.io/commands/smembers/ for more info."}
"SMISMEMBER" {:fn-name "smismember", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["SMISMEMBER" key member], :fn-docstring "`SMISMEMBER` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N) where N is the number of elements being checked for membership\n\nDetermines whether multiple members belong to a set.\nRef. https://redis.io/commands/smismember/ for more info."}
"SMOVE" {:fn-name "smove", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [source destination member], :req-args-fixed ["SMOVE" source destination member], :fn-docstring "`SMOVE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nMoves a member from one set to another.\nRef. https://redis.io/commands/smove/ for more info."}
"SORT" {:fn-name "sort", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SORT" key], :fn-docstring "`SORT` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).\n\nSorts the elements in a list, a set, or a sorted set, optionally storing the result.\nRef. https://redis.io/commands/sort/ for more info."}
"SORT_RO" {:fn-name "sort_ro", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SORT_RO" key], :fn-docstring "`SORT_RO` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).\n\nReturns the sorted elements of a list, a set, or a sorted set.\nRef. https://redis.io/commands/sort_ro/ for more info."}
"SPOP" {:fn-name "spop", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SPOP" key], :fn-docstring "`SPOP` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: Without the count argument O(1), otherwise O(N) where N is the value of the passed count.\n\nReturns one or more random members from a set after removing them. Deletes the set if the last member was popped.\nRef. https://redis.io/commands/spop/ for more info."}
"SPUBLISH" {:fn-name "spublish", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [shardchannel message], :req-args-fixed ["SPUBLISH" shardchannel message], :fn-docstring "`SPUBLISH` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of clients subscribed to the receiving shard channel.\n\nPost a message to a shard channel\nRef. https://redis.io/commands/spublish/ for more info."}
"SRANDMEMBER" {:fn-name "srandmember", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SRANDMEMBER" key], :fn-docstring "`SRANDMEMBER` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.\n\nGet one or multiple random members from a set\nRef. https://redis.io/commands/srandmember/ for more info."}
"SREM" {:fn-name "srem", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["SREM" key member], :fn-docstring "`SREM` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the number of members to be removed.\n\nRemoves one or more members from a set. Deletes the set if the last member was removed.\nRef. https://redis.io/commands/srem/ for more info."}
"SSCAN" {:fn-name "sscan", :cluster-key-idx 1, :fn-params-more [key cursor & args], :fn-params-fixed [key cursor], :req-args-fixed ["SSCAN" key cursor], :fn-docstring "`SSCAN` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nIterates over members of a set.\nRef. https://redis.io/commands/sscan/ for more info."}
"SSUBSCRIBE" {:fn-name "ssubscribe", :cluster-key-idx 1, :fn-params-more [shardchannel & args], :fn-params-fixed [shardchannel], :req-args-fixed ["SSUBSCRIBE" shardchannel], :fn-docstring "`SSUBSCRIBE` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of shard channels to subscribe to.\n\nListens for messages published to shard channels.\nRef. https://redis.io/commands/ssubscribe/ for more info."}
"STRLEN" {:fn-name "strlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["STRLEN" key], :fn-docstring "`STRLEN` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1)\n\nReturns the length of a string value.\nRef. https://redis.io/commands/strlen/ for more info."}
"SUBSCRIBE" {:fn-name "subscribe", :cluster-key-idx 1, :fn-params-more [channel & args], :fn-params-fixed [channel], :req-args-fixed ["SUBSCRIBE" channel], :fn-docstring "`SUBSCRIBE` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of channels to subscribe to.\n\nListens for messages published to channels.\nRef. https://redis.io/commands/subscribe/ for more info."}
"SUBSTR" {:fn-name "substr", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start end], :req-args-fixed ["SUBSTR" key start end], :fn-docstring "`SUBSTR` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.\n\nReturns a substring from a string value.\nRef. https://redis.io/commands/substr/ for more info."}
"SUNION" {:fn-name "sunion", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["SUNION" key], :fn-docstring "`SUNION` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the total number of elements in all given sets.\n\nReturns the union of multiple sets.\nRef. https://redis.io/commands/sunion/ for more info."}
"SUNIONSTORE" {:fn-name "sunionstore", :cluster-key-idx 1, :fn-params-more [destination key & args], :fn-params-fixed [destination key], :req-args-fixed ["SUNIONSTORE" destination key], :fn-docstring "`SUNIONSTORE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(N) where N is the total number of elements in all given sets.\n\nStores the union of multiple sets in a key.\nRef. https://redis.io/commands/sunionstore/ for more info."}
"SUNSUBSCRIBE" {:fn-name "sunsubscribe", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["SUNSUBSCRIBE"], :fn-docstring "`SUNSUBSCRIBE` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N) where N is the number of shard channels to unsubscribe.\n\nStops listening to messages posted to shard channels.\nRef. https://redis.io/commands/sunsubscribe/ for more info."}
"SWAPDB" {:fn-name "swapdb", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [index1 index2], :req-args-fixed ["SWAPDB" index1 index2], :fn-docstring "`SWAPDB` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(N) where N is the count of clients watching or blocking on keys from both databases.\n\nSwaps two Redis databases.\nRef. https://redis.io/commands/swapdb/ for more info."}
"SYNC" {:fn-name "sync", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["SYNC"], :fn-docstring "`SYNC` - Redis command function.\n  Available since: Redis 1.0.0\n\nAn internal command used in replication.\nRef. https://redis.io/commands/sync/ for more info."}
"TIME" {:fn-name "time", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["TIME"], :fn-docstring "`TIME` - Redis command function.\n  Available since: Redis 2.6.0\n       Complexity: O(1)\n\nReturns the server time.\nRef. https://redis.io/commands/time/ for more info."}
"TOUCH" {:fn-name "touch", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["TOUCH" key], :fn-docstring "`TOUCH` - Redis command function.\n  Available since: Redis 3.2.1\n       Complexity: O(N) where N is the number of keys that will be touched.\n\nReturns the number of existing keys out of those specified after updating the time they were last accessed.\nRef. https://redis.io/commands/touch/ for more info."}
"TTL" {:fn-name "ttl", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["TTL" key], :fn-docstring "`TTL` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nReturns the expiration time in seconds of a key.\nRef. https://redis.io/commands/ttl/ for more info."}
"TYPE" {:fn-name "type", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["TYPE" key], :fn-docstring "`TYPE` - Redis command function.\n  Available since: Redis 1.0.0\n       Complexity: O(1)\n\nDetermines the type of value stored at a key.\nRef. https://redis.io/commands/type/ for more info."}
"UNLINK" {:fn-name "unlink", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["UNLINK" key], :fn-docstring "`UNLINK` - Redis command function.\n  Available since: Redis 4.0.0\n       Complexity: O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.\n\nAsynchronously deletes one or more keys.\nRef. https://redis.io/commands/unlink/ for more info."}
"UNSUBSCRIBE" {:fn-name "unsubscribe", :cluster-key-idx 1, :fn-params-more [& args], :fn-params-fixed [], :req-args-fixed ["UNSUBSCRIBE"], :fn-docstring "`UNSUBSCRIBE` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N) where N is the number of channels to unsubscribe.\n\nStops listening to messages posted to channels.\nRef. https://redis.io/commands/unsubscribe/ for more info."}
"UNWATCH" {:fn-name "unwatch", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["UNWATCH"], :fn-docstring "`UNWATCH` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1)\n\nForgets about watched keys of a transaction.\nRef. https://redis.io/commands/unwatch/ for more info."}
"WAIT" {:fn-name "wait", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [numreplicas timeout], :req-args-fixed ["WAIT" numreplicas timeout], :fn-docstring "`WAIT` - Redis command function.\n  Available since: Redis 3.0.0\n       Complexity: O(1)\n\nBlocks until the asynchronous replication of all preceding write commands sent by the connection is completed.\nRef. https://redis.io/commands/wait/ for more info."}
"WAITAOF" {:fn-name "waitaof", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [numlocal numreplicas timeout], :req-args-fixed ["WAITAOF" numlocal numreplicas timeout], :fn-docstring "`WAITAOF` - Redis command function.\n  Available since: Redis 7.2.0\n       Complexity: O(1)\n\nBlocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas.\nRef. https://redis.io/commands/waitaof/ for more info."}
"WATCH" {:fn-name "watch", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["WATCH" key], :fn-docstring "`WATCH` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(1) for every key.\n\nMonitors changes to keys to determine the execution of a transaction.\nRef. https://redis.io/commands/watch/ for more info."}
"XACK" {:fn-name "xack", :cluster-key-idx 1, :fn-params-more [key group id & args], :fn-params-fixed [key group id], :req-args-fixed ["XACK" key group id], :fn-docstring "`XACK` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1) for each message ID processed.\n\nReturns the number of messages that were successfully acknowledged by the consumer group member of a stream.\nRef. https://redis.io/commands/xack/ for more info."}
"XADD" {:fn-name "xadd", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 arg3 & args], :fn-params-fixed [key arg1 arg2 arg3], :req-args-fixed ["XADD" key arg1 arg2 arg3], :fn-docstring "`XADD` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.\n\nAppends a new message to a stream. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/xadd/ for more info."}
"XAUTOCLAIM" {:fn-name "xautoclaim", :cluster-key-idx 1, :fn-params-more [key group consumer min-idle-time start & args], :fn-params-fixed [key group consumer min-idle-time start], :req-args-fixed ["XAUTOCLAIM" key group consumer min-idle-time start], :fn-docstring "`XAUTOCLAIM` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1) if COUNT is small.\n\nChanges, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.\nRef. https://redis.io/commands/xautoclaim/ for more info."}
"XCLAIM" {:fn-name "xclaim", :cluster-key-idx 1, :fn-params-more [key group consumer min-idle-time id & args], :fn-params-fixed [key group consumer min-idle-time id], :req-args-fixed ["XCLAIM" key group consumer min-idle-time id], :fn-docstring "`XCLAIM` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(log N) with N being the number of messages in the PEL of the consumer group.\n\nChanges, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.\nRef. https://redis.io/commands/xclaim/ for more info."}
"XDEL" {:fn-name "xdel", :cluster-key-idx 1, :fn-params-more [key id & args], :fn-params-fixed [key id], :req-args-fixed ["XDEL" key id], :fn-docstring "`XDEL` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1) for each single item to delete in the stream, regardless of the stream size.\n\nReturns the number of messages after removing them from a stream.\nRef. https://redis.io/commands/xdel/ for more info."}
"XGROUP" {:fn-name "xgroup", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["XGROUP" arg1], :fn-docstring "`XGROUP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: Depends on subcommand.\n\nA container for consumer groups commands.\nRef. https://redis.io/commands/xgroup/ for more info."}
"XGROUP CREATE" {:fn-name "xgroup-create", :cluster-key-idx 2, :fn-params-more [key group arg1 & args], :fn-params-fixed [key group arg1], :req-args-fixed ["XGROUP" "CREATE" key group arg1], :fn-docstring "`XGROUP CREATE` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nCreates a consumer group.\nRef. https://redis.io/commands/xgroup-create/ for more info."}
"XGROUP CREATECONSUMER" {:fn-name "xgroup-createconsumer", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group consumer], :req-args-fixed ["XGROUP" "CREATECONSUMER" key group consumer], :fn-docstring "`XGROUP CREATECONSUMER` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(1)\n\nCreates a consumer in a consumer group.\nRef. https://redis.io/commands/xgroup-createconsumer/ for more info."}
"XGROUP DELCONSUMER" {:fn-name "xgroup-delconsumer", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group consumer], :req-args-fixed ["XGROUP" "DELCONSUMER" key group consumer], :fn-docstring "`XGROUP DELCONSUMER` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nDeletes a consumer from a consumer group.\nRef. https://redis.io/commands/xgroup-delconsumer/ for more info."}
"XGROUP DESTROY" {:fn-name "xgroup-destroy", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group], :req-args-fixed ["XGROUP" "DESTROY" key group], :fn-docstring "`XGROUP DESTROY` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(N) where N is the number of entries in the group's pending entries list (PEL).\n\nDestroys a consumer group.\nRef. https://redis.io/commands/xgroup-destroy/ for more info."}
"XGROUP HELP" {:fn-name "xgroup-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["XGROUP" "HELP"], :fn-docstring "`XGROUP HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/xgroup-help/ for more info."}
"XGROUP SETID" {:fn-name "xgroup-setid", :cluster-key-idx 2, :fn-params-more [key group arg1 & args], :fn-params-fixed [key group arg1], :req-args-fixed ["XGROUP" "SETID" key group arg1], :fn-docstring "`XGROUP SETID` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nSets the last-delivered ID of a consumer group.\nRef. https://redis.io/commands/xgroup-setid/ for more info."}
"XINFO" {:fn-name "xinfo", :cluster-key-idx 1, :fn-params-more [arg1 & args], :fn-params-fixed [arg1], :req-args-fixed ["XINFO" arg1], :fn-docstring "`XINFO` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: Depends on subcommand.\n\nA container for stream introspection commands.\nRef. https://redis.io/commands/xinfo/ for more info."}
"XINFO CONSUMERS" {:fn-name "xinfo-consumers", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key group], :req-args-fixed ["XINFO" "CONSUMERS" key group], :fn-docstring "`XINFO CONSUMERS` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns a list of the consumers in a consumer group.\nRef. https://redis.io/commands/xinfo-consumers/ for more info."}
"XINFO GROUPS" {:fn-name "xinfo-groups", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["XINFO" "GROUPS" key], :fn-docstring "`XINFO GROUPS` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns a list of the consumer groups of a stream.\nRef. https://redis.io/commands/xinfo-groups/ for more info."}
"XINFO HELP" {:fn-name "xinfo-help", :cluster-key-idx 2, :fn-params-more nil, :fn-params-fixed [], :req-args-fixed ["XINFO" "HELP"], :fn-docstring "`XINFO HELP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns helpful text about the different subcommands.\nRef. https://redis.io/commands/xinfo-help/ for more info."}
"XINFO STREAM" {:fn-name "xinfo-stream", :cluster-key-idx 2, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["XINFO" "STREAM" key], :fn-docstring "`XINFO STREAM` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturns information about a stream.\nRef. https://redis.io/commands/xinfo-stream/ for more info."}
"XLEN" {:fn-name "xlen", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["XLEN" key], :fn-docstring "`XLEN` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nReturn the number of messages in a stream.\nRef. https://redis.io/commands/xlen/ for more info."}
"XPENDING" {:fn-name "xpending", :cluster-key-idx 1, :fn-params-more [key group & args], :fn-params-fixed [key group], :req-args-fixed ["XPENDING" key group], :fn-docstring "`XPENDING` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.\n\nReturns the information and entries from a stream consumer group's pending entries list.\nRef. https://redis.io/commands/xpending/ for more info."}
"XRANGE" {:fn-name "xrange", :cluster-key-idx 1, :fn-params-more [key start end & args], :fn-params-fixed [key start end], :req-args-fixed ["XRANGE" key start end], :fn-docstring "`XRANGE` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\n\nReturns the messages from a stream within a range of IDs.\nRef. https://redis.io/commands/xrange/ for more info."}
"XREAD" {:fn-name "xread", :cluster-key-idx 1, :fn-params-more [arg1 arg2 arg3 & args], :fn-params-fixed [arg1 arg2 arg3], :req-args-fixed ["XREAD" arg1 arg2 arg3], :fn-docstring "`XREAD` - Redis command function.\n  Available since: Redis 5.0.0\n\nReturns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.\nRef. https://redis.io/commands/xread/ for more info."}
"XREADGROUP" {:fn-name "xreadgroup", :cluster-key-idx 1, :fn-params-more [arg1 arg2 arg3 arg4 arg5 arg6 & args], :fn-params-fixed [arg1 arg2 arg3 arg4 arg5 arg6], :req-args-fixed ["XREADGROUP" arg1 arg2 arg3 arg4 arg5 arg6], :fn-docstring "`XREADGROUP` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.\n\nReturns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.\nRef. https://redis.io/commands/xreadgroup/ for more info."}
"XREVRANGE" {:fn-name "xrevrange", :cluster-key-idx 1, :fn-params-more [key end start & args], :fn-params-fixed [key end start], :req-args-fixed ["XREVRANGE" key end start], :fn-docstring "`XREVRANGE` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\n\nReturns the messages from a stream within a range of IDs in reverse order.\nRef. https://redis.io/commands/xrevrange/ for more info."}
"XSETID" {:fn-name "xsetid", :cluster-key-idx 1, :fn-params-more [key last-id & args], :fn-params-fixed [key last-id], :req-args-fixed ["XSETID" key last-id], :fn-docstring "`XSETID` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(1)\n\nAn internal command for replicating stream values.\nRef. https://redis.io/commands/xsetid/ for more info."}
"XTRIM" {:fn-name "xtrim", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["XTRIM" key arg1 arg2], :fn-docstring "`XTRIM` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.\n\nDeletes messages from the beginning of a stream.\nRef. https://redis.io/commands/xtrim/ for more info."}
"ZADD" {:fn-name "zadd", :cluster-key-idx 1, :fn-params-more [key arg1 arg2 & args], :fn-params-fixed [key arg1 arg2], :req-args-fixed ["ZADD" key arg1 arg2], :fn-docstring "`ZADD` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.\n\nAdds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.\nRef. https://redis.io/commands/zadd/ for more info."}
"ZCARD" {:fn-name "zcard", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key], :req-args-fixed ["ZCARD" key], :fn-docstring "`ZCARD` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(1)\n\nReturns the number of members in a sorted set.\nRef. https://redis.io/commands/zcard/ for more info."}
"ZCOUNT" {:fn-name "zcount", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZCOUNT" key min max], :fn-docstring "`ZCOUNT` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(log(N)) with N being the number of elements in the sorted set.\n\nReturns the count of members in a sorted set that have scores within a range.\nRef. https://redis.io/commands/zcount/ for more info."}
"ZDIFF" {:fn-name "zdiff", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZDIFF" numkeys key], :fn-docstring "`ZDIFF` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.\n\nReturns the difference between multiple sorted sets.\nRef. https://redis.io/commands/zdiff/ for more info."}
"ZDIFFSTORE" {:fn-name "zdiffstore", :cluster-key-idx 1, :fn-params-more [destination numkeys key & args], :fn-params-fixed [destination numkeys key], :req-args-fixed ["ZDIFFSTORE" destination numkeys key], :fn-docstring "`ZDIFFSTORE` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.\n\nStores the difference of multiple sorted sets in a key.\nRef. https://redis.io/commands/zdiffstore/ for more info."}
"ZINCRBY" {:fn-name "zincrby", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key increment member], :req-args-fixed ["ZINCRBY" key increment member], :fn-docstring "`ZINCRBY` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(log(N)) where N is the number of elements in the sorted set.\n\nIncrements the score of a member in a sorted set.\nRef. https://redis.io/commands/zincrby/ for more info."}
"ZINTER" {:fn-name "zinter", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZINTER" numkeys key], :fn-docstring "`ZINTER` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.\n\nReturns the intersect of multiple sorted sets.\nRef. https://redis.io/commands/zinter/ for more info."}
"ZINTERCARD" {:fn-name "zintercard", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZINTERCARD" numkeys key], :fn-docstring "`ZINTERCARD` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.\n\nReturns the number of members of the intersect of multiple sorted sets.\nRef. https://redis.io/commands/zintercard/ for more info."}
"ZINTERSTORE" {:fn-name "zinterstore", :cluster-key-idx 1, :fn-params-more [destination numkeys key & args], :fn-params-fixed [destination numkeys key], :req-args-fixed ["ZINTERSTORE" destination numkeys key], :fn-docstring "`ZINTERSTORE` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.\n\nStores the intersect of multiple sorted sets in a key.\nRef. https://redis.io/commands/zinterstore/ for more info."}
"ZLEXCOUNT" {:fn-name "zlexcount", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZLEXCOUNT" key min max], :fn-docstring "`ZLEXCOUNT` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: O(log(N)) with N being the number of elements in the sorted set.\n\nReturns the number of members in a sorted set within a lexicographical range.\nRef. https://redis.io/commands/zlexcount/ for more info."}
"ZMPOP" {:fn-name "zmpop", :cluster-key-idx 1, :fn-params-more [numkeys key arg1 & args], :fn-params-fixed [numkeys key arg1], :req-args-fixed ["ZMPOP" numkeys key arg1], :fn-docstring "`ZMPOP` - Redis command function.\n  Available since: Redis 7.0.0\n       Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.\n\nReturns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.\nRef. https://redis.io/commands/zmpop/ for more info."}
"ZMSCORE" {:fn-name "zmscore", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZMSCORE" key member], :fn-docstring "`ZMSCORE` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N) where N is the number of members being requested.\n\nReturns the score of one or more members in a sorted set.\nRef. https://redis.io/commands/zmscore/ for more info."}
"ZPOPMAX" {:fn-name "zpopmax", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["ZPOPMAX" key], :fn-docstring "`ZPOPMAX` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.\n\nReturns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.\nRef. https://redis.io/commands/zpopmax/ for more info."}
"ZPOPMIN" {:fn-name "zpopmin", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["ZPOPMIN" key], :fn-docstring "`ZPOPMIN` - Redis command function.\n  Available since: Redis 5.0.0\n       Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.\n\nReturns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.\nRef. https://redis.io/commands/zpopmin/ for more info."}
"ZRANDMEMBER" {:fn-name "zrandmember", :cluster-key-idx 1, :fn-params-more [key & args], :fn-params-fixed [key], :req-args-fixed ["ZRANDMEMBER" key], :fn-docstring "`ZRANDMEMBER` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N) where N is the number of members returned\n\nReturns one or more random members from a sorted set.\nRef. https://redis.io/commands/zrandmember/ for more info."}
"ZRANGE" {:fn-name "zrange", :cluster-key-idx 1, :fn-params-more [key start stop & args], :fn-params-fixed [key start stop], :req-args-fixed ["ZRANGE" key start stop], :fn-docstring "`ZRANGE` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.\n\nReturns members in a sorted set within a range of indexes.\nRef. https://redis.io/commands/zrange/ for more info."}
"ZRANGEBYLEX" {:fn-name "zrangebylex", :cluster-key-idx 1, :fn-params-more [key min max & args], :fn-params-fixed [key min max], :req-args-fixed ["ZRANGEBYLEX" key min max], :fn-docstring "`ZRANGEBYLEX` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nReturns members in a sorted set within a lexicographical range.\nRef. https://redis.io/commands/zrangebylex/ for more info."}
"ZRANGEBYSCORE" {:fn-name "zrangebyscore", :cluster-key-idx 1, :fn-params-more [key min max & args], :fn-params-fixed [key min max], :req-args-fixed ["ZRANGEBYSCORE" key min max], :fn-docstring "`ZRANGEBYSCORE` - Redis command function.\n  Available since: Redis 1.0.5\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nReturns members in a sorted set within a range of scores.\nRef. https://redis.io/commands/zrangebyscore/ for more info."}
"ZRANGESTORE" {:fn-name "zrangestore", :cluster-key-idx 1, :fn-params-more [dst src min max & args], :fn-params-fixed [dst src min max], :req-args-fixed ["ZRANGESTORE" dst src min max], :fn-docstring "`ZRANGESTORE` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.\n\nStores a range of members from sorted set in a key.\nRef. https://redis.io/commands/zrangestore/ for more info."}
"ZRANK" {:fn-name "zrank", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZRANK" key member], :fn-docstring "`ZRANK` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(log(N))\n\nReturns the index of a member in a sorted set ordered by ascending scores.\nRef. https://redis.io/commands/zrank/ for more info."}
"ZREM" {:fn-name "zrem", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZREM" key member], :fn-docstring "`ZREM` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.\n\nRemoves one or more members from a sorted set. Deletes the sorted set if all members were removed.\nRef. https://redis.io/commands/zrem/ for more info."}
"ZREMRANGEBYLEX" {:fn-name "zremrangebylex", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZREMRANGEBYLEX" key min max], :fn-docstring "`ZREMRANGEBYLEX` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\n\nRemoves members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.\nRef. https://redis.io/commands/zremrangebylex/ for more info."}
"ZREMRANGEBYRANK" {:fn-name "zremrangebyrank", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key start stop], :req-args-fixed ["ZREMRANGEBYRANK" key start stop], :fn-docstring "`ZREMRANGEBYRANK` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\n\nRemoves members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.\nRef. https://redis.io/commands/zremrangebyrank/ for more info."}
"ZREMRANGEBYSCORE" {:fn-name "zremrangebyscore", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key min max], :req-args-fixed ["ZREMRANGEBYSCORE" key min max], :fn-docstring "`ZREMRANGEBYSCORE` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\n\nRemoves members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.\nRef. https://redis.io/commands/zremrangebyscore/ for more info."}
"ZREVRANGE" {:fn-name "zrevrange", :cluster-key-idx 1, :fn-params-more [key start stop & args], :fn-params-fixed [key start stop], :req-args-fixed ["ZREVRANGE" key start stop], :fn-docstring "`ZREVRANGE` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.\n\nReturns members in a sorted set within a range of indexes in reverse order.\nRef. https://redis.io/commands/zrevrange/ for more info."}
"ZREVRANGEBYLEX" {:fn-name "zrevrangebylex", :cluster-key-idx 1, :fn-params-more [key max min & args], :fn-params-fixed [key max min], :req-args-fixed ["ZREVRANGEBYLEX" key max min], :fn-docstring "`ZREVRANGEBYLEX` - Redis command function.\n  Available since: Redis 2.8.9\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nReturns members in a sorted set within a lexicographical range in reverse order.\nRef. https://redis.io/commands/zrevrangebylex/ for more info."}
"ZREVRANGEBYSCORE" {:fn-name "zrevrangebyscore", :cluster-key-idx 1, :fn-params-more [key max min & args], :fn-params-fixed [key max min], :req-args-fixed ["ZREVRANGEBYSCORE" key max min], :fn-docstring "`ZREVRANGEBYSCORE` - Redis command function.\n  Available since: Redis 2.2.0\n       Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nReturns members in a sorted set within a range of scores in reverse order.\nRef. https://redis.io/commands/zrevrangebyscore/ for more info."}
"ZREVRANK" {:fn-name "zrevrank", :cluster-key-idx 1, :fn-params-more [key member & args], :fn-params-fixed [key member], :req-args-fixed ["ZREVRANK" key member], :fn-docstring "`ZREVRANK` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(log(N))\n\nReturns the index of a member in a sorted set ordered by descending scores.\nRef. https://redis.io/commands/zrevrank/ for more info."}
"ZSCAN" {:fn-name "zscan", :cluster-key-idx 1, :fn-params-more [key cursor & args], :fn-params-fixed [key cursor], :req-args-fixed ["ZSCAN" key cursor], :fn-docstring "`ZSCAN` - Redis command function.\n  Available since: Redis 2.8.0\n       Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nIterates over members and scores of a sorted set.\nRef. https://redis.io/commands/zscan/ for more info."}
"ZSCORE" {:fn-name "zscore", :cluster-key-idx 1, :fn-params-more nil, :fn-params-fixed [key member], :req-args-fixed ["ZSCORE" key member], :fn-docstring "`ZSCORE` - Redis command function.\n  Available since: Redis 1.2.0\n       Complexity: O(1)\n\nReturns the score of a member in a sorted set.\nRef. https://redis.io/commands/zscore/ for more info."}
"ZUNION" {:fn-name "zunion", :cluster-key-idx 1, :fn-params-more [numkeys key & args], :fn-params-fixed [numkeys key], :req-args-fixed ["ZUNION" numkeys key], :fn-docstring "`ZUNION` - Redis command function.\n  Available since: Redis 6.2.0\n       Complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.\n\nReturns the union of multiple sorted sets.\nRef. https://redis.io/commands/zunion/ for more info."}
"ZUNIONSTORE" {:fn-name "zunionstore", :cluster-key-idx 1, :fn-params-more [destination numkeys key & args], :fn-params-fixed [destination numkeys key], :req-args-fixed ["ZUNIONSTORE" destination numkeys key], :fn-docstring "`ZUNIONSTORE` - Redis command function.\n  Available since: Redis 2.0.0\n       Complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.\n\nStores the union of multiple sorted sets in a key.\nRef. https://redis.io/commands/zunionstore/ for more info."}
}